const { getTopUsersForGuild, getTopUsers } = require('../../utils/getTopUsers');
const { ApplicationCommandOptionType } = require('discord.js');

module.exports = {
    name: "toplevel",
    description: "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö, –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç",
    deleted: false,
    devOnly: false,
    testOnly: false,
    levelsystem: true,

    options: [
        {
            name: 'target',
            description: '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å',
            type: ApplicationCommandOptionType.String,
            required: true,
            choices: [
                {
                    name: '–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä',
                    value: 'server',
                },
                {
                    name: '–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø',
                    value: 'global',
                },
            ],
        },
    ],

    callback: async (client, interaction) => {
        const target = interaction.options.getString('target');
        const guildId = interaction.guild.id;

        if (target === 'server') {
            const topUsers = await getTopUsersForGuild(guildId);

            if (topUsers === null || topUsers.length === 0) {
                return interaction.reply({ content: "–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.", ephemeral: true });
            } else {
                const guild = client.guilds.cache.get(guildId);
                const userList = topUsers.slice(0, 10).map((user, i) => {
                    let emoji;
                    if (i === 0) {
                        emoji = 'ü•á';
                    } else if (i === 1) {
                        emoji = 'ü•à';
                    } else if (i === 2) {
                        emoji = 'ü•â';
                    } else {
                        emoji = 'üéñÔ∏è';
                    }
            
                    return `\`‚Ññ${i + 1}\` ${emoji} <@${client.users.cache.get(user.userId)?.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}>\n‚îä–£—Ä–æ–≤–µ–Ω—å - \`${user.level}\`‚îä–û–ø—ã—Ç - \`${user.xp}\``;
                }).join('\n\n');

                const embed = {
                    color: 0x0099ff,
                    title: `üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${guild.name}`,
                    thumbnail: { url: guild.iconURL({ dynamic: true }) },
                    description: `‚Å£‚ÄÇ\n${userList}`,
                };

                interaction.reply({ embeds: [embed], ephemeral: false });
            }
        } else if (target === 'global') {
            const globalTopUsers = await getTopUsers();

            if (globalTopUsers === null || globalTopUsers.length === 0) {
                return interaction.reply({ content: "–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.", ephemeral: true });
            } else {
                const userList = globalTopUsers.slice(0, 15).map((user, i) => {
                    let emoji;
                    if (i === 0) {
                        emoji = 'ü•á';
                    } else if (i === 1) {
                        emoji = 'ü•à';
                    } else if (i === 2) {
                        emoji = 'ü•â';
                    } else {
                        emoji = 'üéñÔ∏è';
                    }
            
                    return `\`‚Ññ${i + 1}\` ${emoji} <@${client.users.cache.get(user.userId)?.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}>\n‚îä–£—Ä–æ–≤–µ–Ω—å - \`${user.level}\`‚îä–û–ø—ã—Ç - \`${user.xp}\`‚îä–°–µ—Ä–≤–µ—Ä - \`${client.guilds.cache.get(user.guildId)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä'}\``;
                }).join('\n\n');
                
                const embed = {
                    color: 0x0099ff,
                    title: 'üèÜ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                    thumbnail: { url: client.user.displayAvatarURL({ dynamic: true }) },
                    description: `‚Å£‚ÄÇ\n${userList}`,
                };

                interaction.reply({ embeds: [embed], ephemeral: false });
            }
        } else {
            interaction.reply({ content: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ü–µ–ª—å.", ephemeral: true });
        }
    },
};