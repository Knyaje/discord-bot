const { ApplicationCommandOptionType, EmbedBuilder } = require('discord.js');
const UserBattalion = require('../../models/RSQ-UsersBattalions');
const { RSQ } = require("../../../config.json");
const { getInfoDBStructure } = require("../../utils/RSQ-Menu");

module.exports = {
    name: "profile",
    description: "–ü—Ä–æ—Ñ–∏–ª—å",
    deleted: false,
    devOnly: false,
    testOnly: false,
    levelsystem: false,
    rsq_battalions: true,
    options: [
        {
            name: '—Å–ø–∏—Å–æ–∫',
            description: '–í—ã–≤–µ–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤–∞–º–∏',
            type: ApplicationCommandOptionType.User,
            required: false
        },
        {
            name: '–¥–∞–Ω–Ω—ã–µ',
            description: '–ù–∞–ø–∏—Å–∞—Ç—å –∏–º—è',
            type: ApplicationCommandOptionType.String,
            required: false
        }
    ],

    callback: async (client, interaction) => {
        try {
            if (interaction.options.get('–¥–∞–Ω–Ω—ã–µ')) {
                const allowedRoles = ['1032184961484193807', '—Ä–æ–ª—å2_ID', '—Ä–æ–ª—å3_ID']; // –ú–∞—Å—Å–∏–≤ —Å ID —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π
                const hasAllowedRole = interaction.member.roles.cache.some(role => allowedRoles.includes(role.id));

                if (hasAllowedRole) {
                    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è "name", –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    const targetName = interaction.options.getString('–¥–∞–Ω–Ω—ã–µ');
                    const user = await UserBattalion.findOne({ name: targetName }).exec();

                    if (!user) {
                        const embedErrorMessage = new EmbedBuilder()
                            .setTitle('–û—à–∏–±–∫–∞')
                            .setColor('#FF0000')
                            .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω');

                        await interaction.reply({ embeds: [embedErrorMessage], ephemeral: true });
                        return;
                    }

                    const wantedStatus = user.guardInfo.wanted ? '\`\`\`‚Å£‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇüö® –û–ë–™–Ø–í–õ–ï–ù –í –†–û–ó–´–°–ö üö®‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚Å£\`\`\`' : '–ù–µ –æ–±—ä—è–≤–ª–µ–Ω';
                    const structureDescription = getInfoDBStructure(user);

                    const fields = [
                        user.guardInfo.wanted ? { name: '‚Å£‚ÄÇ', value: `${wantedStatus}` } : null,
                        { name: '‚Å£‚ÄÇ', value: `**–ü—Ä–æ—Ñ–∏–ª—å:** <@${user.userId}>\n**–°—Ç—Ä—É–∫—Ç—É—Ä–∞:** *${structureDescription}*\n**–î–æ–ª–∂–Ω–æ—Å—Ç—å:** *${user.info.job}*` },
                        { name: '–î–∞–Ω–Ω—ã–µ', value: `\`\`\`–ù–æ–º–µ—Ä: ${user.info.number}\n–ü–æ–∑—ã–≤–Ω–æ–π: ${user.name}\n–ó–≤–∞–Ω–∏–µ: ${user.info.rank}\n–°–ø–µ—Ü-–∏—è: ${user.info.spec}\`\`\``, inline: true },
                        { name: '–ü–æ–ª–æ–∂–µ–Ω–∏–µ', value: `\`\`\`‚Å£–ë–°–û: ${user.info.bso}\n–í—Ä–µ–º—è –ú–°–ö: ${user.info.timeMoscow}\n–û—Ç—Ä—è–¥: ${user.info.squad}\`\`\``, inline: true },
                        { name: '–ë–æ–µ–≤–æ–π –≤—ã–ª–µ—Ç', value: `\`\`\`–ö–ú–î: ${user.battle.commandFight}\n–£—á–∞—Å—Ç–∏–µ: ${user.battle.fight}\n–ù–∞ –∑–≤–∞–Ω–∏–∏: ${user.battle.fightForRank}\n–î: ${user.battle.lastDateFight}\`\`\``, inline: true },
                        { name: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', value: `\`\`\`–ü—Ä–æ–≤–µ–¥–µ–Ω–æ: ${user.training.trainCreate}\n–£—á–∞—Å—Ç–∏–µ: ${user.training.train}\n–î: ${user.training.lastDateTrain}\`\`\``, inline: true },
                        { name: '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–∫–∞—è', value: `\`\`\`–û–±—É—á–µ–Ω–æ: ${user.instructions.insOB}\n–≠–∫–∑–∞–º–µ–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${user.instructions.insEkz}\n–î: ${user.instructions.lastDateINS}\`\`\``, inline: true },
                        user.guardInfo.wanted ? { name: '‚Å£‚ÄÇ', value: `${wantedStatus}` } : null
                    ].filter(field => field !== null);
                    
                    const embedData = new EmbedBuilder()
                        .setColor('#00FF00')
                        .addFields(fields);
                        
                    await interaction.reply({ embeds: [embedData], ephemeral: true });
                } else {
                    const targetName = interaction.options.getString('–¥–∞–Ω–Ω—ã–µ');
                    const user = await UserBattalion.findOne({ name: targetName }).exec();

                    if (!user) {
                        const embedErrorMessage = new EmbedBuilder()
                            .setTitle('–û—à–∏–±–∫–∞')
                            .setColor('#FF0000')
                            .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω');

                        await interaction.reply({ embeds: [embedErrorMessage], ephemeral: true });
                        return;
                    }

                    getInfoDBStructure(user)

                    const embedData = new EmbedBuilder()
                        .setTitle(`–î–∞–Ω–Ω—ã–µ –¥–µ–ª–∞ ${user.name}`)
                        .setColor('#00FF00')
                        .setDescription(`**–°—Ç—Ä—É–∫—Ç—É—Ä–∞:** *${structureDescription}*\n**–î–æ–ª–∂–Ω–æ—Å—Ç—å:** *${user.info.job}*`)
                        .addFields(
                            { name: '–î–∞–Ω–Ω—ã–µ', value: `‚Å£‚ÄÇ–ù–æ–º–µ—Ä: *${user.info.number}*\n‚Å£‚ÄÇ–ü–æ–∑—ã–≤–Ω–æ–π: *${user.name}*\n‚Å£‚ÄÇ–ó–≤–∞–Ω–∏–µ: *${user.info.rank}*\n‚Å£‚ÄÇ–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: *${user.info.spec}*`, inline: true},
                            { name: '–ü–æ–ª–æ–∂–µ–Ω–∏–µ', value: `‚Å£‚ÄÇ–ë–°–û: *${user.info.bso}*\n‚Å£‚ÄÇ–í—Ä–µ–º—è –ú–°–ö: *${user.info.timeMoscow}*\n‚Å£‚ÄÇ–û—Ç—Ä—è–¥: *${user.info.squad}*`, inline: true},
                            { name: '\u200b', value: '\u200b', inline: true },
                            { name: '–ë–æ–µ–≤–æ–π –≤—ã–ª–µ—Ç', value: `‚Å£‚ÄÇ–ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µ: *${user.battle.commandFight}*\n‚Å£‚ÄÇ–£—á–∞—Å—Ç–∏–µ: *${user.battle.fight}*\n‚ÄÇ–ù–∞ —Ç–µ–∫—É—â–µ–º –∑–≤–∞–Ω–∏–∏: *${user.battle.fightForRank}*\n‚Å£‚ÄÇ–î: *${user.battle.lastDateFight}*`, inline: true},
                            { name: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', value: `‚Å£‚ÄÇ–ü—Ä–æ–≤–µ–¥–µ–Ω–æ: *${user.training.trainCreate}*\n‚Å£‚ÄÇ–£—á–∞—Å—Ç–∏–µ: *${user.training.train}*\n‚Å£‚ÄÇ–î: *${user.training.lastDateTrain}*`, inline: true},
                            { name: '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–∫–∞—è', value: `‚Å£‚ÄÇ–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –æ–±—É—á–µ–Ω–∏–π: *${user.instructions.insOB}*\n‚Å£‚ÄÇ–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —ç–∫–∑–∞–º–µ–Ω–æ–≤: *${user.instructions.insEkz}*\n‚Å£‚ÄÇ–î: *${user.instructions.lastDateINS}*`, inline: true},
                        );

                    await interaction.reply({ embeds: [embedData], ephemeral: true });
                }
            } else if (interaction.options.get('—Å–ø–∏—Å–æ–∫')) {
                const targetUser = interaction.options.getUser('—Å–ø–∏—Å–æ–∫');
                const users = await UserBattalion.find({ userId: targetUser.id }).exec();

                if (users.length === 0) {
                    const embedErrorMessage = new EmbedBuilder()
                        .setTitle('–û—à–∏–±–∫–∞')
                        .setColor('#FF0000')
                        .setDescription('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');

                    await interaction.reply({ embeds: [embedErrorMessage], ephemeral: true });
                    return;
                }

                let structureDescription;

                const embedList = new EmbedBuilder()
                    .setTitle('–°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π')
                    .setColor('#00FF00');

                users.forEach(user => {
                    switch (user.structure) {
                        case '7':
                            structureDescription = `7-–π –±–∞—Ç–∞–ª—å–æ–Ω`;
                            break;
                        case '91':
                            structureDescription = `91-–π –±–∞—Ç–∞–ª—å–æ–Ω`;
                            break;
                        default:
                            structureDescription = user.structure; // –í—ã–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–∏ —Å –æ–¥–Ω–∏–º –∫–µ–π—Å–æ–º
                    }

                    embedList.addFields({ name: user.name, value: `‚Å£‚ÄÇ–°—Ç—Ä—É–∫—Ç—É—Ä–∞: *${structureDescription}*\n‚Å£‚ÄÇ–ù–æ–º–µ—Ä: *${user.info.number}*\n‚Å£‚ÄÇ–ó–≤–∞–Ω–∏–µ: *${user.info.rank}*`});
                });

                await interaction.reply({ embeds: [embedList], ephemeral: true });
            } else {
                // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –Ω–∏ –æ–ø—Ü–∏—è "name", –Ω–∏ "mention", –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                const embedErrorMessage = new EmbedBuilder()
                    .setTitle('–û—à–∏–±–∫–∞')
                    .setColor('#FF0000')
                    .setDescription('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π');

                await interaction.reply({ embeds: [embedErrorMessage], ephemeral: true });
            }
        } catch (error) {
            console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (#8575): ${error}`);

            const embedErrorMessage = new EmbedBuilder()
                .setTitle('–û—à–∏–±–∫–∞')
                .setColor('#FF0000')
                .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã (#8575)');

            await interaction.reply({ embeds: [embedErrorMessage], ephemeral: true });
        }
    }
};