const { ActionRowBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, EmbedBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { spreadsheetId, sheets, processQueue, isProcessingQueue } = require("../../utils/table-91");
const { queue } = require("../../utils/activeArrays");
const { getMenuEmbed91, getInfoDBStructure } = require("../../utils/RSQ-Menu");
const { RSQ } = require("../../../config.json");
const SettingBattalion = require("../../models/RSQ-SettingsBattalions");
const RaportFight = require("../../models/RSQ-RaportsFight");
const UserBattalion = require("../../models/RSQ-UsersBattalions");

module.exports = async (client, interaction) => {

  const channel = interaction.channel;
  const member = interaction.member;
  const guild = interaction.guild;

  if (interaction.isButton()) {

    // –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
    if (interaction.customId === 'deleteChannel') {

      try {
      
        await channel.delete();
  
      } catch (error) {
        console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:', error);
        await interaction.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    }

    // –ú–æ–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ - –ö–æ–º–∞–Ω–¥–Ω–æ–µ –º–µ–Ω—é - –∏—Å–∫–ª—é—á–∏—Ç—å (—É–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ)
    if (interaction.customId === 'RSQ_DeleteUser') {

      try {
      
      const modal = new ModalBuilder()
        .setCustomId('RSQ_ModalDeleteUser')
        .setTitle('–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ –±–æ–π—Ü–∞');
  
      const nameClone = new TextInputBuilder()
        .setCustomId('nameCloneDelete')
        .setLabel("–ö–æ–≥–æ —É–¥–∞–ª–∏—Ç—å?")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(20)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∏ –∑–≤–∞–Ω–∏—è)');
  
      modal.addComponents(
        new ActionRowBuilder().addComponents(nameClone)
      );
  
      await interaction.showModal(modal);
  
      } catch (error) {
        console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:', error);
        await interaction.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    }

    // –†–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–π—Å—è —Å–ø–∏—Å–æ–∫ - –º–µ–Ω—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ–ª–∞
    if (interaction.customId === 'cloneReestrEdit91') {

      try {
          await interaction.message.delete();
  
          const embedSucces = new EmbedBuilder()
            .setColor('#910000')
            //.setTitle('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ —É—Å–ø–µ—à–Ω–∞!')
            .setDescription(`–ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–µ—Å—Ç–∏?`);
  
          const select = new StringSelectMenuBuilder()
            .setCustomId('menuSelectCloneReestrEdit91')
            .setPlaceholder('–ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å?')
            .addOptions(
              new StringSelectMenuOptionBuilder()
                .setLabel('üí¢ ‚îä –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
                .setDescription('–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Å –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é')
                .setValue('returntomenu91'),
              new StringSelectMenuOptionBuilder()
                .setLabel('üìù ‚îä –ù–æ–º–µ—Ä')
                .setDescription('–ú–µ–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –Ω–æ–º–µ—Ä–µ')
                .setValue('changenumberreestrosn91'),
              new StringSelectMenuOptionBuilder()
                .setLabel('üìù ‚îä –ó–≤–∞–Ω–∏–µ')
                .setDescription('–ú–µ–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∑–≤–∞–Ω–∏–∏')
                .setValue('changerankreestrosn91'),
              new StringSelectMenuOptionBuilder()
                .setLabel('üìù ‚îä –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è')
                .setDescription('–ú–µ–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')
                .setValue('changespecreestrosn91'),
              new StringSelectMenuOptionBuilder()
                .setLabel('üìù ‚îä –ß–ª–µ–Ω—Å—Ç–≤–æ –ë–°–û')
                .setDescription('–ú–µ–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —á–ª–µ–Ω—Å—Ç–≤–µ –≤ –ë–°–û')
                .setValue('changebsoreestrosn91'),
              new StringSelectMenuOptionBuilder()
                .setLabel('üìù ‚îä –í—Ä–µ–º—è –ú–°–ö')
                .setDescription('–ú–µ–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ú–°–ö')
                .setValue('changetimereestrosn91'),
              new StringSelectMenuOptionBuilder()
                .setLabel('üìù ‚îä –û—Ç—Ä—è–¥')
                .setDescription('–ú–µ–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –æ—Ç—Ä—è–¥–µ')
                .setValue('changesquadreestrosn91'),
              new StringSelectMenuOptionBuilder()
                .setLabel('üìù ‚îä –î–æ–ª–∂–Ω–æ—Å—Ç—å')
                .setDescription('–ú–µ–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏')
                .setValue('changedreestrosn91'),
              new StringSelectMenuOptionBuilder()
                .setLabel('üìù ‚îä –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞')
                .setDescription('–ú–µ–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π –¥–∞—Ç–µ –ø—Ä–∏–µ–º–∞')
                .setValue('changedatevreestrosn91'),
              /*new StringSelectMenuOptionBuilder()
                .setLabel('üìù ‚îä –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–≤—ã—à–µ–Ω–∏—è')
                .setDescription('–ú–µ–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç–µ –ø–æ–≤—ã—à–µ–Ω–∏—è')
                .setValue('changepreestrosn91'),
              new StringSelectMenuOptionBuilder()
                .setLabel('ü§° ‚îä –ê–≤–∞—Ç–∞—Ä–∫–∞')
                .setDescription('–ú–µ–Ω—è–µ—Ç –≤–∞—à—É –∞–≤–∞—Ç–∞—Ä–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ')
                .setValue('changeavareestrosn91'),*/
            );
  
          const selectrow = new ActionRowBuilder()
            .addComponents(select);
  
          await channel.send({ embeds: [embedSucces], components: [selectrow], ephemeral: false});
      } catch (error) {
        console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (#4615): ${error}`);
  
        const embedErrorMessage = new EmbedBuilder()
            .setTitle('–û—à–∏–±–∫–∞')
            .setColor('#FF0000')
            .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ (#4615)');
  
        interaction.reply({ embeds: [embedErrorMessage], ephemeral: false });
      }
    }

    // –ú–æ–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ - –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–ø–æ—Ä—Ç–∞ –æ –ë–í
    if (interaction.customId === 'raportFight') {

      const modal = new ModalBuilder()
        .setCustomId('raportB')
        .setTitle('–†–∞–ø–æ—Ä—Ç –æ –±–æ–µ–≤–æ–º –≤—ã–ª–µ—Ç–µ');
  
      const nameClone = new TextInputBuilder()
        .setCustomId('nameClone')
        .setLabel("–ö—Ç–æ –¥–æ–∫–ª–∞–¥—ã–≤–∞–µ—Ç?")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(20)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∏ –∑–≤–∞–Ω–∏—è)');
  
      const nameCMDClone = new TextInputBuilder()
        .setCustomId('nameCMDClone')
        .setLabel("–ö—Ç–æ –∫–æ–º–∞–Ω–¥–æ–≤–∞–ª –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏?")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(20)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∏ –∑–≤–∞–Ω–∏—è)');
  
      const namesGroup = new TextInputBuilder()
        .setCustomId('namesGroup')
        .setLabel("–ö—Ç–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏?")
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (Neyo, Wolfy, Rex)');
  
      const date = new TextInputBuilder()
        .setCustomId('date')
        .setLabel("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏")
        .setStyle(TextInputStyle.Short)
        .setValue('00.00.2024 | 00:00')
        .setMaxLength(20)
        .setPlaceholder(`–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–î.–ú–ú.–ì–ì–ì–ì | –ß–ß:–ú–ú'`);
  
      const description = new TextInputBuilder()
        .setCustomId('description')
        .setLabel("–û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        .setStyle(TextInputStyle.Paragraph);
  
      modal.addComponents(
        new ActionRowBuilder().addComponents(nameClone),
        new ActionRowBuilder().addComponents(nameCMDClone),
        new ActionRowBuilder().addComponents(namesGroup),
        new ActionRowBuilder().addComponents(date),
        new ActionRowBuilder().addComponents(description)
      );
  
      // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      await interaction.showModal(modal);
    }

    // –ú–æ–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ–µ - –æ—Ç–∫–∞–∑ –æ–± —Ä–∞–ø–æ—Ä—Ç–µ –ë–í
    if (interaction.customId === 'RSQ_rejectRaportFight') {

      const modal = new ModalBuilder()
        .setCustomId('RSQ_RaportFight_injury')
        .setTitle('–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞');
  
      const DZ = new TextInputBuilder()
        .setCustomId('RSQ_ReasonRaportFight')
        .setLabel("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞")
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('–†–∞—Å–ø–∏—à–∏—Ç–µ/–Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–∞—à–µ–≥–æ –æ—Ç–∫–∞–∑–∞');
  
      modal.addComponents(
        new ActionRowBuilder().addComponents(DZ)
      );
  
      // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      await interaction.showModal(modal);
    }

    // –ú–æ–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ–µ - –∏–∑–º–µ–Ω–∏—Ç—å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –æ—Ç—Ä—è–¥–∞
    if (interaction.customId === 'RSQ_EditSquads') {

      const modal = new ModalBuilder()
        .setCustomId('RSQ_EditSquadsM')
        .setTitle('–û—Ç—Ä—è–¥—ã –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è');
  
      const DZ = new TextInputBuilder()
        .setCustomId('RSQ_Squads')
        .setLabel("–ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –æ—Ç—Ä—è–¥–æ–≤")
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –≤–∞—à–∏—Ö –æ—Ç—Ä—è–¥–æ–≤ —á–µ—Ä–µ–∑ , (LSQ, LS, WP, HR)');
  
      modal.addComponents(
        new ActionRowBuilder().addComponents(DZ)
      );
  
      // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      await interaction.showModal(modal);
    }

    // –ú–æ–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–µ–ª–∞
    if (interaction.customId === 'cloneReestrCreate') {

      try {
        const modalName = new ModalBuilder()
          .setCustomId('newnamereestr')
          .setTitle('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –¥–µ–ª–∞');
    
        const newName = new TextInputBuilder()
          .setCustomId('newName')
          .setLabel("–í–∞—à –ø–æ–∑—ã–≤–Ω–æ–π")
          .setStyle(TextInputStyle.Short)
          .setMaxLength(10)
          .setMinLength(3)
          .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π');
    
        const newNomber = new TextInputBuilder()
          .setCustomId('newNomber')
          .setLabel("–í–∞—à –Ω–æ–º–µ—Ä")
          .setStyle(TextInputStyle.Short)
          .setMaxLength(4)
          .setValue('‚ûñ')
          .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä');
    
        const newRank = new TextInputBuilder()
          .setCustomId('newRank')
          .setLabel("–í–∞—à–µ –∑–≤–∞–Ω–∏–µ")
          .setStyle(TextInputStyle.Short)
          .setMaxLength(4)
          .setMinLength(2)
          .setPlaceholder('CR, CT, PVT, PFC, CS, CPL –∏ —Ç.–¥.');
    
        const newData = new TextInputBuilder()
          .setCustomId('newData')
          .setLabel("–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–ø—É—Å")
          .setStyle(TextInputStyle.Short)
          .setMaxLength(10)
          .setMinLength(10)
          .setValue('00.00.2024')
          .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');
    
        const newTime = new TextInputBuilder()
          .setCustomId('newTime')
          .setLabel("–í–∞—à–µ –≤—Ä–µ–º—è –æ—Ç –ú–°–ö")
          .setStyle(TextInputStyle.Short)
          .setMaxLength(3)
          .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ —É –≤–∞—Å –≤—Ä–µ–º—è –ú–°–ö –∏–ª–∏ +1, +2 –∏ —Ç.–¥. –æ—Ç –ú–°–ö');
    
          modalName.addComponents(
          new ActionRowBuilder().addComponents(newName),
          new ActionRowBuilder().addComponents(newNomber),
          new ActionRowBuilder().addComponents(newRank),
          new ActionRowBuilder().addComponents(newData),
          new ActionRowBuilder().addComponents(newTime),
        );
    
        await interaction.showModal(modalName);               
      } catch (error) {
        console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (#4545): ${error}`);   
        
        const embedErrorMessage = new EmbedBuilder()
            .setTitle('–û—à–∏–±–∫–∞')
            .setColor('#FF0000')
            .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ (#4545)');
  
        await interaction.reply({ embeds: [embedErrorMessage], ephemeral: true });
      }
    }

    // –ú–æ–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ - —Ä–∞–ø–æ—Ä—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏/–æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –≤ —Ä–æ–∑—ã—Å–∫
    if (interaction.customId === 'RSQ_Wanted') {

      try {
        const modalName = new ModalBuilder()
          .setCustomId('RSQ_WantedModal')
          .setTitle('–†–∞–ø–æ—Ä—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏');
    
        const newName = new TextInputBuilder()
          .setCustomId('guardNameModal')
          .setLabel("–í–∞—à –ø–æ–∑—ã–≤–Ω–æ–π")
          .setStyle(TextInputStyle.Short)
          .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
    
        const newNomber = new TextInputBuilder()
          .setCustomId('targetNameModal')
          .setLabel("–ü–æ–∑—ã–≤–Ω–æ–π –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è")
          .setStyle(TextInputStyle.Short)
          .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è');
    
        const newRank = new TextInputBuilder()
          .setCustomId('guardYKModal')
          .setLabel("–ü—É–Ω–∫—Ç—ã –Ω–∞—Ä—É—à–µ–Ω–∏–π –£–ö –í–ê–†")
          .setStyle(TextInputStyle.Short)
          .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é 1.1.1, 1.2.4, 1.3.1');
    
        const newData = new TextInputBuilder()
          .setCustomId('guardInfoModal')
          .setLabel("–û–ø–∏—Å–∞–Ω–∏–µ")
          .setStyle(TextInputStyle.Paragraph)
          .setPlaceholder('–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏/–Ω–∞—Ä—É—à–µ–Ω–∏—è');
    
        const newTime = new TextInputBuilder()
          .setCustomId('guardWantedModal')
          .setLabel("–û–±—ä—è–≤–∏—Ç—å –≤ —Ä–æ–∑—ã—Å–∫?")
          .setStyle(TextInputStyle.Short)
          .setMaxLength(1)
          .setPlaceholder('0 - –Ω–µ—Ç | 1 - –¥–∞');
    
        modalName.addComponents(
          new ActionRowBuilder().addComponents(newName),
          new ActionRowBuilder().addComponents(newNomber),
          new ActionRowBuilder().addComponents(newRank),
          new ActionRowBuilder().addComponents(newData),
          new ActionRowBuilder().addComponents(newTime),
        );
    
        await interaction.showModal(modalName);               
      } catch (error) {
        console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (#4545): ${error}`);   
        
        const embedErrorMessage = new EmbedBuilder()
            .setTitle('–û—à–∏–±–∫–∞')
            .setColor('#FF0000')
            .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ (#4545)');
  
        await interaction.reply({ embeds: [embedErrorMessage], ephemeral: true });
      }
    }

    // –ú–æ–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ - –ø—Ä–æ–±–∏—Ç—å –ø–æ –ë–î –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤
    if (interaction.customId === 'RSQ_infoViolations') {

      const modal = new ModalBuilder()
        .setCustomId('RSQ_infoViolationsM')
        .setTitle('–ü—Ä–æ–±–∏—Ç—å');
  
      const guardName = new TextInputBuilder()
        .setCustomId('guardNameModal')
        .setLabel("–í–∞—à –ø–æ–∑—ã–≤–Ω–æ–π")
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
  
      const targetNomber = new TextInputBuilder()
        .setCustomId('targetNameModal')
        .setLabel("–ü–æ–∑—ã–≤–Ω–æ–π –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è")
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è');  
      
      modal.addComponents(
        new ActionRowBuilder().addComponents(guardName),
        new ActionRowBuilder().addComponents(targetNomber)
      );
  
      // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      await interaction.showModal(modal);
    }

    // –í–∑–∞–∏–º–æ–¥–µ–π—Ç—Å–≤–∏–µ —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º
    if (interaction.customId === 'RSQ_GuardRaport_FalseWanted' || interaction.customId === 'RSQ_GuardRaport_DeleteWanted' || interaction.customId === 'RSQ_GuardRaport_TrueWanted') {
      try {
          const target = await UserBattalion.findOne({ 'guardInfo.violations.messageId': interaction.message.id });
          if (!target) {
            const embedErrorMessage = new EmbedBuilder()
              .setTitle('–û—à–∏–±–∫–∞')
              .setColor('#FF0000')
              .setDescription(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –¥–∞–Ω–Ω—ã–º –¥–µ–ª–æ–º, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
    
            await interaction.reply({ embeds: [embedErrorMessage], ephemeral: true });
            return;
          }
    
          const violationIndex = target.guardInfo.violations.findIndex(violation => violation.messageId === interaction.message.id);
          if (violationIndex === -1) {
            console.error(`–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º ${interaction.message.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–ª–∏`);
            return;
          }
    

          let updatedEmbed;
          let row;
          if (interaction.customId === 'RSQ_GuardRaport_FalseWanted') {

            target.guardInfo.violations[violationIndex].status = false;
            const violation = target.guardInfo.violations[violationIndex];

            let embedWanted;
            if (violation.wanted === '0') {
              embedWanted = '*–ù–µ –æ–±—ä—è–≤–ª–µ–Ω*';
            } else if (violation.wanted === '1') {
              embedWanted = '`–û–±—ä—è–≤–ª–µ–Ω`';
            }

            updatedEmbed = new EmbedBuilder()
              .setAuthor({ name: `üìõ –†–∞–ø–æ—Ä—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏` })
              .setColor('#FF0000')
              .setDescription(`
              **–ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π:** *${violation.targetName}* ||<@${violation.targetId}>||
              \n**–ù–∞—Ä—É—à–µ–Ω–∏–µ –£–ö:** *${violation.codex}*\n**–†–æ–∑—ã—Å–∫:** ${embedWanted}
              \n**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** \`\`\`${violation.info}\`\`\`
              **–ü–æ–¥–ø–∏—Å—å:** *${violation.guardName}* ||<@${violation.guardId}>||
              \n\n**–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ–Ω—è–≤—à–∏–π —Å—Ç–∞—Ç—É—Å:** <@${interaction.user.id}>
              `)
              .setTimestamp()
              .setFooter({ text: `‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π`});
    
            const editWanted = new ButtonBuilder()
              .setCustomId('RSQ_GuardRaport_TrueWanted')
              .setLabel('–ê–∫—Ç–∏–≤–Ω—ã–π')
              .setStyle(ButtonStyle.Secondary)
              .setDisabled(false);

            const deleteWanted = new ButtonBuilder()
              .setCustomId('RSQ_GuardRaport_DeleteWanted')
              .setLabel('–£–¥–∞–ª–∏—Ç—å')
              .setStyle(ButtonStyle.Secondary)
              .setDisabled(false);

            row = new ActionRowBuilder()
              .addComponents(editWanted, deleteWanted);

            const messageToUpdate = await interaction.channel.messages.fetch(interaction.message.id);
            await messageToUpdate.edit({ embeds: [updatedEmbed], components: [row] });
            await interaction.reply({ content: '–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', ephemeral: true })

          } else if (interaction.customId === 'RSQ_GuardRaport_TrueWanted') {

            target.guardInfo.violations[violationIndex].status = true;
            const violation = target.guardInfo.violations[violationIndex];

            let embedWanted;
            if (violation.wanted === '0') {
              embedWanted = '*–ù–µ –æ–±—ä—è–≤–ª–µ–Ω*';
            } else if (violation.wanted === '1') {
              embedWanted = '`–û–±—ä—è–≤–ª–µ–Ω`';
            }

            updatedEmbed = new EmbedBuilder()
              .setAuthor({ name: `üìõ –†–∞–ø–æ—Ä—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏` })
              .setColor('#FF0000')
              .setDescription(`
              **–ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π:** *${violation.targetName}* ||<@${violation.targetId}>||
              \n**–ù–∞—Ä—É—à–µ–Ω–∏–µ –£–ö:** *${violation.codex}*\n**–†–æ–∑—ã—Å–∫:** ${embedWanted}
              \n**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** \`\`\`${violation.info}\`\`\`
              **–ü–æ–¥–ø–∏—Å—å:** *${violation.guardName}* ||<@${violation.guardId}>||
              \n\n**–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ–Ω—è–≤—à–∏–π —Å—Ç–∞—Ç—É—Å:** <@${interaction.user.id}>
              `)
              .setTimestamp()
              .setFooter({ text: `‚úîÔ∏è –ê–∫—Ç–∏–≤–µ–Ω`});
    
            const editWanted = new ButtonBuilder()
              .setCustomId('RSQ_GuardRaport_FalseWanted')
              .setLabel('–ù–µ –∞–∫—Ç–∏–≤–Ω—ã–π')
              .setStyle(ButtonStyle.Secondary)
              .setDisabled(false);

            const deleteWanted = new ButtonBuilder()
              .setCustomId('RSQ_GuardRaport_DeleteWanted')
              .setLabel('–£–¥–∞–ª–∏—Ç—å')
              .setStyle(ButtonStyle.Secondary)
              .setDisabled(false);

            row = new ActionRowBuilder()
              .addComponents(editWanted, deleteWanted);

            const messageToUpdate = await interaction.channel.messages.fetch(interaction.message.id);
            await messageToUpdate.edit({ embeds: [updatedEmbed], components: [row] });
            await interaction.reply({ content: '–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', ephemeral: true })

          } else if (interaction.customId === 'RSQ_GuardRaport_DeleteWanted') {
            
            updatedEmbed = new EmbedBuilder()
              //.setAuthor({ name: `üìõ –†–∞–ø–æ—Ä—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏` })
              .setColor('#000100')
              .setDescription(`
              \`\`\`–î–∞–Ω–Ω—ã–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã\n\`\`\`**–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:** <@${interaction.user.id}>`)
              .setTimestamp()
              .setFooter({ text: `üóëÔ∏è –£–¥–∞–ª–µ–Ω`});

            const messageToUpdate = await interaction.channel.messages.fetch(interaction.message.id);
            await messageToUpdate.edit({ embeds: [updatedEmbed], components: [] });

            target.guardInfo.violations.splice(violationIndex, 1);
          }
    
          await target.save();
      } catch (error) {
        console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ #7197:', error);
        const embedErrorMessage = new EmbedBuilder()
          .setTitle('–û—à–∏–±–∫–∞')
          .setColor('#FF0000')
          .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã (#7197)');
  
        await interaction.reply({ embeds: [embedErrorMessage], ephemeral: true });
      }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—ã (–º–µ–Ω—é)
    if (interaction.customId === 'RSQ_EditRadio') {

      const embed = new EmbedBuilder()
        .setColor('#FFFFFF')
        .setDescription(`–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É`);

      const select = new StringSelectMenuBuilder()
        .setCustomId('RSQ_EditRadioMB')
        .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É')
        .addOptions(
        new StringSelectMenuOptionBuilder()
          .setLabel(' ‚îä ALPHA')
          .setDescription('–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Å –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é')
          .setValue('radio1'),
        new StringSelectMenuOptionBuilder()
          .setLabel(' ‚îä BRAVO')
          .setDescription('–ú–µ–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –Ω–æ–º–µ—Ä–µ')
          .setValue('radio2'),
        new StringSelectMenuOptionBuilder()
          .setLabel(' ‚îä DELTA')
          .setDescription('–ú–µ–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∑–≤–∞–Ω–∏–∏')
          .setValue('radio3'),
        new StringSelectMenuOptionBuilder()
          .setLabel(' ‚îä ULTIMA')
          .setDescription('–ú–µ–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')
          .setValue('radio4'),
        new StringSelectMenuOptionBuilder()
          .setLabel(' ‚îä RENO')
          .setDescription('–ú–µ–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —á–ª–µ–Ω—Å—Ç–≤–µ –≤ –ë–°–û')
          .setValue('radio5'),
      );

      const selectrow = new ActionRowBuilder()
        .addComponents(select);

      await interaction.reply({ embeds: [embed], components: [selectrow], ephemeral: true });
    }
  }

  // –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–∞–ø–æ—Ä—Ç–∞ –æ –ë–í
  if (interaction.isButton() && interaction.customId === 'RSQ_approveRaportFight' || interaction.isModalSubmit() && interaction.customId === 'RSQ_RaportFight_injury') {
    
    try {
      const raportFight = await RaportFight.findOne({ moderatorMessageId: interaction.message.id });
    
      let reason;
      if (interaction.isModalSubmit() && interaction.customId === 'RSQ_RaportFight_injury') {
        reason = interaction.fields.getTextInputValue('RSQ_ReasonRaportFight');
      }

      if (!raportFight) {
        return await interaction.reply({ content: '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', ephemeral: true });
      }

      const guild = interaction.guild;

      const moderatorChannel = guild.channels.cache.get(raportFight.moderatorChannelId);
      if (!moderatorChannel) {
        return await interaction.reply({ content: '–ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true });
      }

      const moderatorMessage = await moderatorChannel.messages.fetch(raportFight.moderatorMessageId);
      if (!moderatorMessage) {
        return await interaction.reply({ content: '–°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', ephemeral: true });
      }

      const userChannel = guild.channels.cache.get(raportFight.userChannelId);
      if (!userChannel) {
        return await interaction.reply({ content: '–ö–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true });
      }

      const userMessage = await userChannel.messages.fetch(raportFight.userMessageId);
      if (!userMessage) {
        return await interaction.reply({ content: '–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', ephemeral: true });
      }

      const commander = raportFight.commander;
      const clone = raportFight.reporter;
      const group = raportFight.group;
      const reportNumber = raportFight.reportNumber;
      const dateOP = raportFight.date;
      const description = raportFight.operationDescription;
      let date = raportFight.date;
      
      date = date.split(' | ')[0];

      if (interaction.isButton() && interaction.customId === 'RSQ_approveRaportFight') {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã
        for (const member of group) {
          const user = await UserBattalion.findOne({ name: member.name });
          if (user) {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã
            const range = '7th Table | Users!Q4:Q'; // –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω
            const response = await sheets.spreadsheets.values.get({
                spreadsheetId,
                range,
            });
            const values = response.data.values.flat(); // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
            const index = values.indexOf(member.name);
            if (index !== -1) {
              const rowToUpdate = index + 4; // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º 4
              const rangeToUpdate = `T${rowToUpdate}`;
              const rangeToUpdate2 = `U${rowToUpdate}`;
              const responseT = await sheets.spreadsheets.values.get({
                spreadsheetId,
                range: rangeToUpdate,
              });
              const responseT2 = await sheets.spreadsheets.values.get({
                spreadsheetId,
                range: rangeToUpdate2,
              });
              const currentValue = parseInt(responseT.data.values[0][0]) || 0;
              const currentValue2 = parseInt(responseT2.data.values[0][0]) || 0;
              const valueToUpdate = [[currentValue + 1]];
              const valueToUpdate2 = [[currentValue2 + 1]];

              try {
                await sheets.spreadsheets.values.update({
                  spreadsheetId,
                  range: rangeToUpdate,
                  valueInputOption: 'RAW',
                  requestBody: { values: valueToUpdate },
                });
                await sheets.spreadsheets.values.update({
                  spreadsheetId,
                  range: `W${rowToUpdate}`,
                  valueInputOption: 'RAW',
                  requestBody: { values: [[date]] }, // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —è—á–µ–π–∫–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π date
                });
                if (user.info.rank === member.rank) {
                  await sheets.spreadsheets.values.update({
                    spreadsheetId,
                    range: rangeToUpdate2,
                    valueInputOption: 'RAW',
                    requestBody: { values: valueToUpdate2 },
                  });
                }
              } catch (error) {
                console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ Google –¢–∞–±–ª–∏—Ü–µ:', error);
              }
            }
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.battle.fight = (parseInt(user.battle.fight) + 1).toString();
            if (user.info.rank === member.rank) {
              user.battle.fightForRank = (parseInt(user.battle.fightForRank) + 1).toString();
            }
            // –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è date –≤ lastDateFight
            user.battle.lastDateFight = date;
            await user.save();
          }
        }

        const commanderUser = await UserBattalion.findOne({ name: commander.name });

        if (commanderUser) {
          // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã
          const range = '7th Table | Users!Q4:Q'; // –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω
          const response = await sheets.spreadsheets.values.get({
            spreadsheetId,
            range,
          });
          const values = response.data.values.flat(); // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π
      
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
          const index = values.indexOf(commander.name);
          if (index !== -1) {
            const rowToUpdate = index + 4; // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º 4
            const rangeToUpdate = `S${rowToUpdate}`;
            const responseS = await sheets.spreadsheets.values.get({
              spreadsheetId,
              range: rangeToUpdate,
            });
            const currentValue = parseInt(responseS.data.values[0][0]) || 0;
            const valueToUpdate = [[currentValue + 1]];

            try {
              await sheets.spreadsheets.values.update({
                spreadsheetId,
                range: rangeToUpdate,
                valueInputOption: 'RAW',
                requestBody: { values: valueToUpdate },
              });
            } catch (error) {
              console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ #7753:', error);
            }
          }
      
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∏—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          commanderUser.battle.commandFight = (parseInt(commanderUser.battle.commandFight) + 1).toString();
          await commanderUser.save();
        }
      }

      const embedToChannel = new EmbedBuilder()
        .setAuthor({ name: '–°—Ç–∞—Ç—É—Å: üëÄ', iconURL: 'https://cdn.discordapp.com/icons/981509661926785064/a_59b054b674dcdc19922b7574bc16b284.webp?size=96' })
        .setTitle(`–†–∞–ø–æ—Ä—Ç –æ –±–æ–µ–≤–æ–º –≤—ã–ª–µ—Ç–µ ‚Ññ${reportNumber}`)
        .setColor('#3498db')
        .setDescription(`–î–æ–∫–ª–∞–¥—ã–≤–∞–µ—Ç *${clone.rank} ${clone.number} ${clone.name}* ||<@${clone.id}>|| –æ –±–æ–µ–≤–æ–º –≤—ã–ª–µ—Ç–µ ‚Ññ${reportNumber}\n\n**–ö–æ–º–∞–Ω–¥–∏—Ä:** *${commander.rank} ${commander.number} ${commander.name} ||<@${commander.id}>||*\n**–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏:** ${date}\n\n**–°–æ—Å—Ç–∞–≤:** ${group.map(member => `\n*${member.rank} ${member.number} ${member.name}* ||<@${member.id}>||`)}\n\n**–•–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏**\n ${description}`)
        .setTimestamp();

      await moderatorMessage.edit({ embeds: [embedToChannel], components: [] });

      const embedAnswersUser = new EmbedBuilder()
        .setAuthor(interaction.customId === 'RSQ_approveRaportFight' ? { name: '–°—Ç–∞—Ç—É—Å: ‚úîÔ∏è', iconURL: 'https://cdn.discordapp.com/icons/981509661926785064/a_59b054b674dcdc19922b7574bc16b284.webp?size=96' } : { name: '–°—Ç–∞—Ç—É—Å: ‚ùå', iconURL: 'https://cdn.discordapp.com/icons/981509661926785064/a_59b054b674dcdc19922b7574bc16b284.webp?size=96' })
        .setTitle(`–†–∞–ø–æ—Ä—Ç –æ –±–æ–µ–≤–æ–º –≤—ã–ª–µ—Ç–µ ‚Ññ${reportNumber}`)
        .setColor(interaction.customId === 'RSQ_approveRaportFight' ? '#32a852' : '#FF0000')
        .setDescription(`–î–æ–∫–ª–∞–¥—ã–≤–∞–µ—Ç *${clone.rank} ${clone.number !== '‚ûñ' ? ' ' + clone.number : ''} ${clone.name}* ||<@${clone.id}>|| –æ –±–æ–µ–≤–æ–º –≤—ã–ª–µ—Ç–µ ‚Ññ${reportNumber}\n\n**–ö–æ–º–∞–Ω–¥–∏—Ä:** *${commander.rank} ${commander.number !== '‚ûñ' ? ' ' + commander.number : ''} ${commander.name}* ||<@${commander.id}>||\n**–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏:** ${dateOP}\n\n**–°–æ—Å—Ç–∞–≤:** ${group.map(member => {
          let description = `\n*${member.rank}`;
          if (member.number !== '‚ûñ') {
              description += ` ${member.number}`;
          }
          description += ` ${member.name}* ||<@${member.id}>||`;
          return description;
        })}\n\n**–•–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏**\n ${description}${interaction.customId === 'RSQ_approveRaportFight' ? `` : `\n\n**–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞:** ${reason}`}`)
        .setTimestamp();

      await userMessage.edit({ embeds: [embedAnswersUser], components: [] });

      const embedAnswersModerator = new EmbedBuilder()
        .setAuthor(interaction.customId === 'RSQ_approveRaportFight' ? { name: '–°—Ç–∞—Ç—É—Å: ‚úîÔ∏è', iconURL: 'https://cdn.discordapp.com/icons/981509661926785064/a_59b054b674dcdc19922b7574bc16b284.webp?size=96' } : { name: '–°—Ç–∞—Ç—É—Å: ‚ùå', iconURL: 'https://cdn.discordapp.com/icons/981509661926785064/a_59b054b674dcdc19922b7574bc16b284.webp?size=96' })
        .setTitle(`–†–∞–ø–æ—Ä—Ç –æ –±–æ–µ–≤–æ–º –≤—ã–ª–µ—Ç–µ ‚Ññ${reportNumber}`)
        .setColor(interaction.customId === 'RSQ_approveRaportFight' ? '#32a852' : '#FF0000')
        .setDescription(`–î–æ–∫–ª–∞–¥—ã–≤–∞–µ—Ç *${clone.rank} ${clone.number !== '‚ûñ' ? ' ' + clone.number : ''} ${clone.name}* ||<@${clone.id}>|| –æ –±–æ–µ–≤–æ–º –≤—ã–ª–µ—Ç–µ ‚Ññ${reportNumber}\n\n**–ö–æ–º–∞–Ω–¥–∏—Ä:** *${commander.rank} ${commander.number !== '‚ûñ' ? ' ' + commander.number : ''} ${commander.name}* ||<@${commander.id}>||\n**–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏:** ${dateOP}\n\n**–°–æ—Å—Ç–∞–≤:** ${group.map(member => {
          let description = `\n*${member.rank}`;
          if (member.number !== '‚ûñ') {
            description += ` ${member.number}`;
          }
          description += ` ${member.name}* ||<@${member.id}>||`;
          return description;
        })}\n\n**–•–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏**\n ${description}\n\n${interaction.customId === 'RSQ_approveRaportFight' ? `**–ü—Ä–æ–≤–µ—Ä–∏–ª:** ${interaction.user}` : `**–ü—Ä–æ–≤–µ—Ä–∏–ª:** ${interaction.user}\n**–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞:** ${reason}`}`)
        .setTimestamp();

      await moderatorMessage.edit({ content: '', embeds: [embedAnswersModerator], components: [] });

      await RaportFight.deleteOne({ _id: raportFight._id });

      const sucessEmbed = new EmbedBuilder()
        .setColor('#910000')
        .setDescription(interaction.customId === 'RSQ_approveRaportFight' ? '–†–∞–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω' : '–†–∞–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω')
    } catch (error) {
      await console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ #7548:', error);
    }
  }

  if (interaction.isStringSelectMenu() && interaction.customId === 'RSQ_EditRadioMB') {
    const settings = await SettingBattalion.findOne({ guildID: interaction.guildId });
    const selectedValue = interaction.values[0];
    const radioChannelId = settings.channelID.baseMessage.channel; // ID –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    const radioMessageId = settings.channelID.baseMessage.message; // ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å

    // –ú–∞–ø–ø–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const radioValuesMap = {
      'radio1': settings.radioConnection.numberRadio.radio1,
      'radio2': settings.radioConnection.numberRadio.radio2,
      'radio3': settings.radioConnection.numberRadio.radio3,
      'radio4': settings.radioConnection.numberRadio.radio4,
      'radio5': settings.radioConnection.numberRadio.radio5,
    };

    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–µ
    const newActualRadioValue = radioValuesMap[selectedValue];

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ actualRadio –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await SettingBattalion.updateOne({ guildID: interaction.guildId }, { $set: { 'radioConnection.actualRadio': newActualRadioValue } });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è actualRadio:', error);
      await interaction.reply({ content: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Å—Ç–æ—Ç—ã.", ephemeral: true }); 
    }

    const embedMessage = await createEmbedMessage(selectedValue, settings);

    if (radioChannelId !== "false") {
      if (radioMessageId !== 'false') {
        const radioChannel = interaction.guild.channels.cache.get(radioChannelId);
        const radioMessage = await radioChannel.messages.fetch(radioMessageId);
        await radioMessage.edit({ embeds: [embedMessage] });
      } else {
        const radioChannel = interaction.guild.channels.cache.get(radioChannelId);
        const sentMessage = await radioChannel.send({ embeds: [embedMessage] });
        const newMessageId = sentMessage.id;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await SettingBattalion.findOneAndUpdate({ guildID: interaction.guild.id }, { 'channelID.baseMessage.message': newMessageId });
      }
    } else {
      await interaction.reply({ content: '–ö–∞–Ω–∞–ª —à—Ç–∞–±–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω', ephemeral: true });
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é
    await interaction.reply({ content: "–ß–∞—Å—Ç–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", ephemeral: true });    
  }

  if (interaction.isStringSelectMenu() && interaction.customId === 'menuSelectCloneReestrEdit91') {
    const selectedValue = interaction.values[0];

    // –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    if (selectedValue === 'returntomenu91') {

      await interaction.message.delete();

      const { embed, components } = getMenuEmbed91();

      await await interaction.channel.send({ embeds: [embed], components: components, ephemeral: false });

    }

    // –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä
    if (selectedValue === 'changenumberreestrosn91') {
      const modal = new ModalBuilder()
        .setCustomId('RSQ_EditUserNomber')
        .setTitle('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä');

      const nameClone = new TextInputBuilder()
        .setCustomId('nameClone')
        .setLabel("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∑—ã–≤–Ω–æ–π")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(20)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∏ –∑–≤–∞–Ω–∏—è)');

      const editNomber = new TextInputBuilder()
        .setCustomId('editNomber')
        .setLabel("–í–∞—à –Ω–æ–º–µ—Ä")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(4)
        .setValue('‚ûñ')
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä');

      modal.addComponents(
        new ActionRowBuilder().addComponents(nameClone),
        new ActionRowBuilder().addComponents(editNomber)
      );

      await interaction.showModal(modal);
    }

    // –ò–∑–º–µ–Ω–∏—Ç—å –∑–≤–∞–Ω–∏–µ
    if (selectedValue === 'changerankreestrosn91') {
      const modal = new ModalBuilder()
        .setCustomId('RSQ_EditUserRank')
        .setTitle('–ò–∑–º–µ–Ω–∏—Ç—å –∑–≤–∞–Ω–∏–µ');

      const nameClone = new TextInputBuilder()
        .setCustomId('nameClone')
        .setLabel("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∑—ã–≤–Ω–æ–π")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(20)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∏ –∑–≤–∞–Ω–∏—è)');

      const editRank = new TextInputBuilder()
        .setCustomId('editRank')
        .setLabel("–í–∞—à–µ –Ω–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(4)
        .setMinLength(2)
        .setPlaceholder('CR, CT, PVT, PFC, CS, CPL –∏ —Ç.–¥.');

      const editData = new TextInputBuilder()
        .setCustomId('editData')
        .setLabel("–î–∞—Ç–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(10)
        .setMinLength(10)
        .setValue('00.00.2024')
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');

      modal.addComponents(
        new ActionRowBuilder().addComponents(nameClone),
        new ActionRowBuilder().addComponents(editRank),
        new ActionRowBuilder().addComponents(editData)
      );

      await interaction.showModal(modal);
    }

    // –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ú–°–ö
    if (selectedValue === 'changetimereestrosn91') {
      const modal = new ModalBuilder()
        .setCustomId('RSQ_EditUserTimeM')
        .setTitle('–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ú–°–ö');

      const nameClone = new TextInputBuilder()
        .setCustomId('nameClone')
        .setLabel("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∑—ã–≤–Ω–æ–π")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(20)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∏ –∑–≤–∞–Ω–∏—è)');

      const editTime = new TextInputBuilder()
        .setCustomId('editTime')
        .setLabel("–í–∞—à–µ –≤—Ä–µ–º—è –æ—Ç –ú–°–ö")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(3)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ —É –≤–∞—Å –≤—Ä–µ–º—è –ú–°–ö –∏–ª–∏ +1, +2 –∏ —Ç.–¥. –æ—Ç –ú–°–ö');


      modal.addComponents(
        new ActionRowBuilder().addComponents(nameClone),
        new ActionRowBuilder().addComponents(editTime)
      );

      await interaction.showModal(modal);
    }

    // –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—Ä—è–¥
    if (selectedValue === 'changesquadreestrosn91') {
      const modal = new ModalBuilder()
        .setCustomId('RSQ_EditUserSquad')
        .setTitle('–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—Ä—è–¥');

      const nameClone = new TextInputBuilder()
        .setCustomId('nameClone')
        .setLabel("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∑—ã–≤–Ω–æ–π")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(20)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∏ –∑–≤–∞–Ω–∏—è)');

      const editSquad = new TextInputBuilder()
        .setCustomId('editSquad')
        .setLabel("–û—Ç—Ä—è–¥")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(3)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –≤–∞—à–µ–≥–æ –æ—Ç—Ä—è–¥–∞');


      modal.addComponents(
        new ActionRowBuilder().addComponents(nameClone),
        new ActionRowBuilder().addComponents(editSquad)
      );

      await interaction.showModal(modal);
    }

    // –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å
    if (selectedValue === 'changedreestrosn91') {
      const modal = new ModalBuilder()
        .setCustomId('RSQ_EditUserBog')
        .setTitle('–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å');

      const nameClone = new TextInputBuilder()
        .setCustomId('nameClone')
        .setLabel("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∑—ã–≤–Ω–æ–π")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(20)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∏ –∑–≤–∞–Ω–∏—è)');

      modal.addComponents(
        new ActionRowBuilder().addComponents(nameClone)
      );

      await interaction.showModal(modal);
    }

    // –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–µ—Ü-–∏—é
    if (selectedValue === 'changespecreestrosn91') {
      const modal = new ModalBuilder()
        .setCustomId('RSQ_EditUserSpec')
        .setTitle('–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–µ—Ü-–∏—é');

      const nameClone = new TextInputBuilder()
        .setCustomId('nameClone')
        .setLabel("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∑—ã–≤–Ω–æ–π")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(20)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∏ –∑–≤–∞–Ω–∏—è)');

      const editSpec = new TextInputBuilder()
        .setCustomId('editSpec')
        .setLabel("–ß–ª–µ–Ω—Å—Ç–≤–æ –ë–°–û")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(3)
        .setPlaceholder('BT, ABT, RT, ART, BM, BMI, BMS, BSM');


      modal.addComponents(
        new ActionRowBuilder().addComponents(nameClone),
        new ActionRowBuilder().addComponents(editSpec)
      );

      await interaction.showModal(modal);
    }

    // –ò–∑–º–µ–Ω–∏—Ç—å –ë–°–û
    if (selectedValue === 'changebsoreestrosn91') {
      const modal = new ModalBuilder()
        .setCustomId('RSQ_EditUserBso')
        .setTitle('–ò–∑–º–µ–Ω–∏—Ç—å —á–ª–µ–Ω—Å—Ç–≤–æ –ë–°–û');

      const nameClone = new TextInputBuilder()
        .setCustomId('nameClone')
        .setLabel("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∑—ã–≤–Ω–æ–π")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(20)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∏ –∑–≤–∞–Ω–∏—è)');

      const editBso = new TextInputBuilder()
        .setCustomId('editBso')
        .setLabel("–ß–ª–µ–Ω—Å—Ç–≤–æ –ë–°–û")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(3)
        .setPlaceholder('ARC, ARF –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0 –µ—Å–ª–∏ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ë–°–û');


      modal.addComponents(
        new ActionRowBuilder().addComponents(nameClone),
        new ActionRowBuilder().addComponents(editBso)
      );

      await interaction.showModal(modal);
    }

    // –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
    if (selectedValue === 'changedatevreestrosn91') {
      const modal = new ModalBuilder()
        .setCustomId('RSQ_EditUserDateV')
        .setTitle('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è');

      const nameClone = new TextInputBuilder()
        .setCustomId('nameClone')
        .setLabel("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∑—ã–≤–Ω–æ–π")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(20)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∏ –∑–≤–∞–Ω–∏—è)');

      const editData = new TextInputBuilder()
        .setCustomId('editData')
        .setLabel("–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è")
        .setStyle(TextInputStyle.Short)
        .setMaxLength(10)
        .setMinLength(10)
        .setValue('00.00.2024')
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');

      modal.addComponents(
        new ActionRowBuilder().addComponents(nameClone),
        new ActionRowBuilder().addComponents(editData)
      );

      await interaction.showModal(modal);
    }
  }

  if (interaction.isModalSubmit() && interaction.customId === 'RSQ_ModalDeleteUser' ) {

    try {
      const name = interaction.fields.getTextInputValue('nameCloneDelete');

      const user = await UserBattalion.findOne({ name });

      if (!user) {
        const embedErrorMessage = new EmbedBuilder()
          .setTitle('–û—à–∏–±–∫–∞')
          .setColor('#FF0000')
          .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await interaction.reply({ embeds: [embedErrorMessage], ephemeral: true });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (interaction.guildId === RSQ.menuOptions['91-battalion'].BattalionGuildID && user.structure !== '91') {
        const embedErrorMessage = new EmbedBuilder()
          .setTitle('–û—à–∏–±–∫–∞')
          .setColor('#FF0000')
          .setDescription('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
        await interaction.reply({ embeds: [embedErrorMessage], ephemeral: true });
        return;
      }

      if (interaction.guildId === RSQ.menuOptions['7-battalion'].BattalionGuildID && user.structure !== '7') {
        const embedErrorMessage = new EmbedBuilder()
          .setTitle('–û—à–∏–±–∫–∞')
          .setColor('#FF0000')
          .setDescription('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
        await interaction.reply({ embeds: [embedErrorMessage], ephemeral: true });
        return;
      }
      
      const deletedUser = await UserBattalion.findOneAndDelete({ name });

      let regSuccesDB = '';
      let regSuccesGT = '';
      if (deletedUser) {
        regSuccesDB = '*–£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ*'
      } else {
        regSuccesDB = '*–î–µ–ª–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ*'
      }

      let range;
      if (interaction.guildId === RSQ.menuOptions["91-battalion"].BattalionGuildID) {
        range = RSQ.tableList['91-battalion'].usersOsnova;
      } else if (interaction.guildId === RSQ.menuOptions["7-battalion"].BattalionGuildID) {
        range = RSQ.tableList['7-battalion'].usersOsnova;
      } else {
        const embed = new EmbedBuilder()
          .setTitle('–û—à–∏–±–∫–∞')
          .setColor('#FF0000')
          .setDescription('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ–ø–æ–∑–Ω–∞–Ω (#1741)');

        await interaction.reply({ embeds: embed, ephemeral: true });
        return;
      }

      const res = await sheets.spreadsheets.values.get({
        spreadsheetId,
        range,
      });

      console.log(res)

      const rows = res.data.values || [];
      const rowIndex = rows.findIndex(row => row[1] === name);

      if (rowIndex !== -1) {
        const response = await sheets.spreadsheets.batchUpdate({
          spreadsheetId,
          requestBody: {
            requests: [{
              deleteDimension: {
                range: {
                  dimension: 'ROWS',
                  startIndex: rowIndex + 3, // –° —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
                  endIndex: rowIndex + 4 // –° —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
                }
              }
            }]
          }
        });

        if (response.status === 200) {
          regSuccesGT = '*–£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ*'
        } else {
          regSuccesGT = `*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:*`, response.statusText
        }   
      } else {
        regSuccesGT = '*–î–µ–ª–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ*'
      }

      const embedSucces = new EmbedBuilder()
        .setColor('#910000')
        .setDescription(`**–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** ${regSuccesDB}\n**Google —Ç–∞–±–ª–∏—Ü–∞:** ${regSuccesGT}`);
      
      await interaction.reply({ embeds: [embedSucces], ephemeral: true });
    } catch(error) {
      console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (#7245): ${error}`);
    }
  }

  if (interaction.isModalSubmit() && interaction.customId === 'RSQ_WantedModal' ) {
    const guardName = interaction.fields.getTextInputValue('guardNameModal');
    const targetName = interaction.fields.getTextInputValue('targetNameModal');
    const guardYK = interaction.fields.getTextInputValue('guardYKModal');
    const guardInfo = interaction.fields.getTextInputValue('guardInfoModal');
    const guardWanted = interaction.fields.getTextInputValue('guardWantedModal');

    if (guardWanted !== '0' && guardWanted !== '1') {
      const embedInvalidValue = new EmbedBuilder()
        .setTitle('–û—à–∏–±–∫–∞')
        .setColor('#FF0000')
        .setDescription('–£–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è 5 –ø—É–Ω–∫—Ç–∞');

      await interaction.reply({ embeds: [embedInvalidValue], ephemeral: true });
      return;
    }

    try {
      const guard = await UserBattalion.findOne({ name: guardName });
      if (!guard) {
        const embedNotFound = new EmbedBuilder()
          .setTitle('–û—à–∏–±–∫–∞')
          .setColor('#FF0000')
          .setDescription(`–î–µ–ª–æ —Å –ø–æ–∑—ã–≤–Ω—ã–º "*${guardName}*" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);

        await interaction.reply({ embeds: [embedNotFound], ephemeral: true });
        return;
      }

      if (!guard || guard.userId !== interaction.member.id) {
        const embedNotFound = new EmbedBuilder()
          .setTitle('–û—à–∏–±–∫–∞')
          .setColor('#FF0000')
          .setDescription(`–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞–ø–æ—Ä—Ç–∞ –æ—Ç –∏–º–µ–Ω–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);

        await interaction.reply({ embeds: [embedNotFound], ephemeral: true });
        return;
      }

      if (!guard.config.wantedSet) {
        const embedAccessDenied = new EmbedBuilder()
          .setTitle('–û—à–∏–±–∫–∞')
          .setColor('#FF0000')
          .setDescription(`–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–µ—Å—Ç—Ä—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤`);

        await interaction.reply({ embeds: [embedAccessDenied], ephemeral: true });
        return;
      }

      const target = await UserBattalion.findOne({ name: targetName });
      if (!target) {
        const embedNotFound = new EmbedBuilder()
          .setTitle('–û—à–∏–±–∫–∞')
          .setColor('#FF0000')
          .setDescription(`–î–µ–ª–æ —Å –ø–æ–∑—ã–≤–Ω—ã–º "*${targetName}*" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);

        await interaction.reply({ embeds: [embedNotFound], ephemeral: true });
        return;
      }

      const setting = await SettingBattalion.findOne({ guildID: interaction.guild.id });
      if (!setting || !setting.channelID.wantedRaport.channel) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–Ω–∞–ª ${interaction.guild.id}`);
        return;
      }

      const targetChannel = interaction.guild.channels.cache.get(setting.channelID.wantedRaport.channel);
      if (!targetChannel) {
        console.error(`–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª —Å ID ${setting.channelID.wantedRaport.channel} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        
        const embedErrorMessage = new EmbedBuilder()
          .setTitle('–û—à–∏–±–∫–∞')
          .setColor('#FF0000')
          .setDescription('–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–ª–∏ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω (#7187)');

        await interaction.reply({ embeds: [embedErrorMessage], ephemeral: true });

        return;
      }

      let embedWanted;

      if (guardWanted === '0') {
        embedWanted = '*–ù–µ –æ–±—ä—è–≤–ª–µ–Ω*';
      } else if (guardWanted === '1') {
        embedWanted = '`–û–±—ä—è–≤–ª–µ–Ω`';
      }

      const numberGuard = /^\d{4}$/.test(guard.info.number) ? guard.info.number : '';
      const numberTarget = /^\d{4}$/.test(target.info.number) ? target.info.number : '';

      const guardInfoUser = {
        id: guard.userId,
        info: `${guard.info.rank} ${numberGuard} ${guardName}`
      };

      const targetInfoUser = {
        id: target.userId,
        info: `${target.info.rank} ${numberTarget} ${targetName}`
      };

      const embedMessage = new EmbedBuilder()
        .setAuthor({ name: `üìõ –†–∞–ø–æ—Ä—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏` })
        .setColor('#FF0000')
        .setDescription(`
        **–ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π:** *${targetInfoUser.info}* ||<@${targetInfoUser.id}>||
        \n**–ù–∞—Ä—É—à–µ–Ω–∏–µ –£–ö:** *${guardYK}*\n**–†–æ–∑—ã—Å–∫:** ${embedWanted}
        \n**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** \`\`\`${guardInfo}\`\`\`
        \n**–ü–æ–¥–ø–∏—Å—å:** *${guardInfoUser.info}* ||<@${guardInfoUser.id}>||
        `)
        .setTimestamp()
        .setFooter({ text: `‚úîÔ∏è –ê–∫—Ç–∏–≤–µ–Ω`});

      const editWanted = new ButtonBuilder()
        .setCustomId('RSQ_GuardRaport_FalseWanted')
        .setLabel('–ù–µ –∞–∫—Ç–∏–≤–Ω—ã–π')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(false);

      const deleteWanted = new ButtonBuilder()
        .setCustomId('RSQ_GuardRaport_DeleteWanted')
        .setLabel('–£–¥–∞–ª–∏—Ç—å')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(false);

      const row = new ActionRowBuilder()
        .addComponents(editWanted, deleteWanted);

      const sentMessage = await targetChannel.send({ embeds: [embedMessage], components: [row] });
    
      target.guardInfo.violations.push({
        messageId: sentMessage.id,
        messageURL: sentMessage.url,
        guardName: guardInfoUser.info,
        guardId: guardInfoUser.id,
        targetName: targetInfoUser.info,
        targetId: targetInfoUser.id,
        codex: guardYK,
        info: guardInfo,
        wanted: guardWanted
      });

      if (guardWanted === '1') {
        target.guardInfo.wanted = true;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await target.save();

      await interaction.reply({ content: `–†–∞–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω --> ${sentMessage.url}`, ephemeral: true });
    } catch (error) {
      console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ #7187:', error);
      const embedErrorMessage = new EmbedBuilder()
        .setTitle('–û—à–∏–±–∫–∞')
        .setColor('#FF0000')
        .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã (#7187)');

      await interaction.reply({ embeds: [embedErrorMessage], ephemeral: true });
    }
  }

  if (interaction.isModalSubmit() && interaction.customId === 'RSQ_infoViolationsM' ) {
    const guardName = interaction.fields.getTextInputValue('guardNameModal');
    const targetName = interaction.fields.getTextInputValue('targetNameModal');

    try {
      const guard = await UserBattalion.findOne({ name: guardName });
      if (!guard) {
        const embedNotFound = new EmbedBuilder()
          .setTitle('–û—à–∏–±–∫–∞')
          .setColor('#FF0000')
          .setDescription(`–î–µ–ª–æ —Å –ø–æ–∑—ã–≤–Ω—ã–º "*${guardName}*" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);

        await interaction.reply({ embeds: [embedNotFound], ephemeral: true });
        return;
      }

      if (!guard || guard.userId !== interaction.member.id) {
        const embedNotFound = new EmbedBuilder()
          .setTitle('–û—à–∏–±–∫–∞')
          .setColor('#FF0000')
          .setDescription(`–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–µ–ª—É`);

        await interaction.reply({ embeds: [embedNotFound], ephemeral: true });
        return;
      }

      if (!guard.config.wantedSet) {
        const embedAccessDenied = new EmbedBuilder()
          .setTitle('–û—à–∏–±–∫–∞')
          .setColor('#FF0000')
          .setDescription(`–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–µ—Å—Ç—Ä—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤`);

        await interaction.reply({ embeds: [embedAccessDenied], ephemeral: true });
        return;
      }

      const user = await UserBattalion.findOne({ name: targetName });
      if (!user) {
        const embedNotFound = new EmbedBuilder()
          .setTitle('–û—à–∏–±–∫–∞')
          .setColor('#FF0000')
          .setDescription(`–î–µ–ª–æ —Å –ø–æ–∑—ã–≤–Ω—ã–º "*${targetName}*" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);

        await interaction.reply({ embeds: [embedNotFound], ephemeral: true });
        return;
      }

      const wantedStatus = user.guardInfo.wanted ? '\`\`\`‚Å£‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇüö® –û–ë–™–Ø–í–õ–ï–ù –í –†–û–ó–´–°–ö üö®‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚Å£\`\`\`' : '–ù–µ –æ–±—ä—è–≤–ª–µ–Ω';
      const structureDescription = getInfoDBStructure(user);
      const numberClone = /^\d{4}$/.test(user.info.number) ? user.info.number : '';

      const clone = {
        id: user.userId,
        rank: `${user.info.rank}`,
        number: `${numberClone}`,
        name: `${targetName}`
      };

      const embedData = new EmbedBuilder()
        .setTitle(`–î–∞–Ω–Ω—ã–µ –¥–µ–ª–∞ ${clone.rank} ${clone.number} ${clone.name}`)
        .setColor('#00FF00')

      if (user.guardInfo.violations.length === 0) {
        user.guardInfo.wanted ? embedData.addFields({ name: '‚Å£‚ÄÇ', value: `${wantedStatus}` }) : null,
        embedData.addFields({ name: '‚Å£‚ÄÇ', value: `**–ü—Ä–æ—Ñ–∏–ª—å:** <@${clone.id}>\n**–°—Ç—Ä—É–∫—Ç—É—Ä–∞:** *${structureDescription}*\n**–î–æ–ª–∂–Ω–æ—Å—Ç—å:** *${user.info.job}*` });
        embedData.addFields({ name: '‚Å£‚ÄÇ', value: '–ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'});
        user.guardInfo.wanted ? embedData.addFields({ name: '‚Å£‚ÄÇ', value: `${wantedStatus}` }) : null
      } else {
        const violationsFields = user.guardInfo.violations.map((violation, index) => {
          return {
            name: `\`–ù–∞—Ä—É—à–µ–Ω–∏–µ #${index + 1}\``,
            value: `[–ü–æ–¥—Ä–æ–±–Ω–µ–µ](${violation.messageURL})` +
                    `\`\`\`–°—Ç–∞—Ç—É—Å: ${violation.status ? '‚úîÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–π' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}\n–£–ö: ${violation.codex}\`\`\`\n`,
            inline: true
          };
        });

        user.guardInfo.wanted ? embedData.addFields({ name: '‚Å£‚ÄÇ', value: `${wantedStatus}` }) : null,
        embedData.addFields({ name: '‚Å£‚ÄÇ', value: `**–°—Ç—Ä—É–∫—Ç—É—Ä–∞:** *${structureDescription}*\n**–î–æ–ª–∂–Ω–æ—Å—Ç—å:** *${user.info.job}*` });
        embedData.addFields(...violationsFields);
        user.guardInfo.wanted ? embedData.addFields({ name: '‚Å£‚ÄÇ', value: `${wantedStatus}` }) : null
      }

      await interaction.reply({ embeds: [embedData], ephemeral: true });
    } catch (error) {
      console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ #7187:', error);
      const embedErrorMessage = new EmbedBuilder()
        .setTitle('–û—à–∏–±–∫–∞')
        .setColor('#FF0000')
        .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã (#7187)');

      await interaction.reply({ embeds: [embedErrorMessage], ephemeral: true });
    }
  }

  if (interaction.isModalSubmit() && interaction.customId === 'RSQ_EditSquadsM' ){
    const squads = interaction.fields.getTextInputValue('RSQ_Squads');
    const guildID = interaction.guild.id;

    try {
      // –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ guildID –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      let settings = await SettingBattalion.findOne({ guildID });
      if (!settings) {
        settings = new SettingBattalion({ guildID });
      }

      // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ squadsBattalion
      settings.squadsBattalion = squads;

      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
      await settings.save();

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      await interaction.reply({ content: `–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ **${squads}**`, ephemeral: true });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö', ephemeral: true });
    }
  }

  if (interaction.isModalSubmit() && interaction.customId === 'RSQ_EditUserNomber' || interaction.customId === 'RSQ_EditUserRank' || interaction.customId === 'RSQ_EditUserTimeM' || interaction.customId === 'RSQ_EditUserBso' || interaction.customId === 'RSQ_EditUserSpec' || interaction.customId === 'RSQ_EditUserDateV' || interaction.customId === 'RSQ_EditUserSquad' || interaction.customId === 'RSQ_EditUserBog') {
    const nameClone = interaction.fields.getTextInputValue('nameClone');
    const settings = await SettingBattalion.findOne({ guildID: interaction.guild.id });
    const userName = await UserBattalion.findOne({ name: nameClone });

    await interaction.deferReply();

    try {
      if (!userName || userName.userId !== interaction.member.id) {
        await interaction.editReply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–ª–∞');
        return;
      }

      if (userName) {

        // –ú–µ–Ω—è–µ—Ç –Ω–æ–º–µ—Ä
        if (interaction.customId === 'RSQ_EditUserNomber') {
          const newNomber = interaction.fields.getTextInputValue('editNomber');
          const oldNomber = userName.info.number;

          const res = await sheets.spreadsheets.values.get({
            spreadsheetId,
            range: '7th Table | Users!C4:E'
          });
      
          const rows = res.data.values;
          const rowIndex = rows.findIndex(row => row[0] === nameClone);
      
          if (rowIndex !== -1) {
            const range = `7th Table | Users!E${rowIndex + 4}`; // rowIndex + 4, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1, –∞ –º–∞—Å—Å–∏–≤ —Å 0
      
            const valueInputOption = 'USER_ENTERED';
            const valueRangeBody = {
              values: [[newNomber]]
            };
      
            await sheets.spreadsheets.values.update({
              spreadsheetId,
              range,
              valueInputOption,
              resource: valueRangeBody
            });
      
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const user = await UserBattalion.findOneAndUpdate({ name: nameClone }, { 'info.number': newNomber }, { new: true });

            if (user) {
              const successEmbed = new EmbedBuilder()
                .setColor('#910000')
                .setDescription('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
                .addFields({ name: '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: oldNomber, inline: true })
                .addFields({ name: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: newNomber, inline: true });
            
              await interaction.editReply({ embeds: [successEmbed] });
              
              // –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
              const logEmbed = new EmbedBuilder()
                .setTitle('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞')
                .setColor('#FFA500')
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <@${interaction.user.id}>\n–ü–æ–∑—ã–≤–Ω–æ–π: *${nameClone}*`)
                .addFields({ name: '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: oldNomber, inline: true })
                .addFields({ name: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: newNomber, inline: true })
                .setTimestamp();
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤
              if (settings && settings.channelID.reestrLog.updateDelo !== 'false') {
                const logChannelId = settings.channelID.reestrLog.updateDelo;
                const logChannel = interaction.guild.channels.cache.get(logChannelId);
                if (logChannel) {
                  await logChannel.send({ embeds: [logEmbed], ephemeral: false });
                } else {
                  console.error(`–ö–∞–Ω–∞–ª —Å ID ${logChannelId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
              }
            } else {
              await interaction.editReply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
            }
          }
        }

        // –ú–µ–Ω—è–µ—Ç –∑–≤–∞–Ω–∏–µ
        if (interaction.customId === 'RSQ_EditUserRank') {
          const editRank = interaction.fields.getTextInputValue('editRank');
          const editData = interaction.fields.getTextInputValue('editData');
          const validRanks = ['CR', 'CT', 'PVT', 'PFC', 'CS', 'CPL', 'SGT', 'SSG', 'SPSG', 'LT', 'SLT', 'SPLT', 'CPT'];
          const dateRegex = /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.\d{4}$/;
          const oldRank = userName.info.rank;

          if (!validRanks.includes(editRank)) {
            const embedMessageError = new EmbedBuilder()
              .setColor('#FF0000')
              .setDescription('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–≤–∞–Ω–∏–µ (CT, PVT, PFC, CS, CPL –∏ —Ç.–¥.)');
  
            return interaction.editReply({ embeds: [embedMessageError], ephemeral: false });
          }

          if (!dateRegex.test(editData)) {
            const errorEmbed = new EmbedBuilder()
              .setColor('#FF0000')
              .setDescription('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì *(–ø—Ä–∏–º–µ—Ä 09.09.2023)*');
  
            return interaction.editReply({ embeds: [errorEmbed], ephemeral: false });
          }

          const res = await sheets.spreadsheets.values.get({
            spreadsheetId,
            range: '7th Table | Users!C4:U'
          });
      
          const rows = res.data.values;
          const rowIndex = rows.findIndex(row => row[0] === nameClone);
      
          if (rowIndex !== -1) {
            const range = `7th Table | Users!F${rowIndex + 4}`; // rowIndex + 4, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1, –∞ –º–∞—Å—Å–∏–≤ —Å 0
            const range2 = `7th Table | Users!M${rowIndex + 4}`; // rowIndex + 4, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1, –∞ –º–∞—Å—Å–∏–≤ —Å 0
            const range3 = `7th Table | Users!U${rowIndex + 4}`; // rowIndex + 4, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1, –∞ –º–∞—Å—Å–∏–≤ —Å 0

            const valueInputOption = 'USER_ENTERED';
            const valueRangeBody = {
              values: [[editRank]]
            };
            const valueRangeBody2 = {
              values: [[editData]]
            };
            const valueRangeBody3 = {
              values: [['0']]
            };
      
            await sheets.spreadsheets.values.update({
              spreadsheetId,
              range,
              valueInputOption,
              resource: valueRangeBody
            });
            await sheets.spreadsheets.values.update({
              spreadsheetId,
              range: range2,
              valueInputOption,
              resource: valueRangeBody2
            });
            await sheets.spreadsheets.values.update({
              spreadsheetId,
              range: range3,
              valueInputOption,
              resource: valueRangeBody3
            });
      
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const user = await UserBattalion.findOneAndUpdate({ name: nameClone }, { 'info.rank': editRank, 'info.dateRankUP': editData, 'battle.fightForRank': '0'  }, { new: true });

            if (user) {
              const successEmbed = new EmbedBuilder()
                .setColor('#910000')
                .setDescription('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
                .addFields({ name: '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: oldRank, inline: true })
                .addFields({ name: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: editRank, inline: true });

              await interaction.editReply({ embeds: [successEmbed] });
                  
              const logEmbed = new EmbedBuilder()
                .setTitle('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–≤–∞–Ω–∏—è')
                .setColor('#FFA500')
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <@${interaction.user.id}>\n–ü–æ–∑—ã–≤–Ω–æ–π: *${nameClone}*`)
                .addFields({ name: '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: oldRank, inline: true })
                .addFields({ name: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: editRank, inline: true })
                .setTimestamp();
                  
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤
              if (settings && settings.channelID.reestrLog.updateDelo !== 'false') {
                const logChannelId = settings.channelID.reestrLog.updateDelo;
                const logChannel = interaction.guild.channels.cache.get(logChannelId);
                if (logChannel) {
                  await logChannel.send({ embeds: [logEmbed], ephemeral: false });
                } else {
                  console.error(`–ö–∞–Ω–∞–ª —Å ID ${logChannelId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
              }
            } else {
              await interaction.editReply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
            }
          }
        }

        // –ú–µ–Ω—è–µ—Ç –≤—Ä–µ–º—è –ú–°–ö
        if (interaction.customId === 'RSQ_EditUserTimeM') {
          const editTime = interaction.fields.getTextInputValue('editTime');
          const validFime = ['0', '+1', '+2', '+3', '+4', '+5', '+6', '+7', '+8', '-1', '-2', '-3', '-4', '-5', '-6', '-7', '-8'];
          const oldTime = userName.info.timeMoscow;

          if (!validFime.includes(editTime)) {
            const embedMessageError = new EmbedBuilder()
              .setColor('#FF0000')
              .setDescription('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –ú–°–ö (–≤–≤–µ–¥–∏—Ç–µ 0 –µ—Å–ª–∏ —É –≤–∞—Å –≤—Ä–µ–º—è –ú–°–ö, –∏–ª–∏ –∂–µ +1, +2, -1, -2 –æ—Ç –ú–°–ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)');
  
            return interaction.editReply({ embeds: [embedMessageError], ephemeral: false });
          }

          const oldModifiedArray = (oldTime === '0') ? '–ú–°–ö' : `–ú–°–ö (${oldTime})`;
          const modifiedArray = (editTime === '0') ? '–ú–°–ö' : `–ú–°–ö (${editTime})`;

          const res = await sheets.spreadsheets.values.get({
            spreadsheetId,
            range: '7th Table | Users!C4:I'
          });
      
          const rows = res.data.values;
          const rowIndex = rows.findIndex(row => row[0] === nameClone);
      
          if (rowIndex !== -1) {
            const range = `7th Table | Users!I${rowIndex + 4}`; // rowIndex + 4, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1, –∞ –º–∞—Å—Å–∏–≤ —Å 0
      
            const valueInputOption = 'USER_ENTERED';
            const valueRangeBody = {
              values: [[modifiedArray]]
            };
      
            await sheets.spreadsheets.values.update({
              spreadsheetId,
              range,
              valueInputOption,
              resource: valueRangeBody
            });
      
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const user = await UserBattalion.findOneAndUpdate({ name: nameClone }, { 'info.timeMoscow': editTime }, { new: true });

            if (user) {
              const successEmbed = new EmbedBuilder()
                .setColor('#910000')
                .setDescription('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
                .addFields({ name: '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: oldModifiedArray, inline: true })
                .addFields({ name: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: modifiedArray, inline: true });

              await interaction.editReply({ embeds: [successEmbed] });
                
              const logEmbed = new EmbedBuilder()
                .setTitle('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ú–°–ö')
                .setColor('#FFA500')
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <@${interaction.user.id}>\n–ü–æ–∑—ã–≤–Ω–æ–π: *${nameClone}*`)
                .addFields({ name: '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: oldModifiedArray, inline: true })
                .addFields({ name: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: modifiedArray, inline: true })
                .setTimestamp();
                
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤
              if (settings && settings.channelID.reestrLog.updateDelo !== 'false') {
                const logChannelId = settings.channelID.reestrLog.updateDelo;
                const logChannel = interaction.guild.channels.cache.get(logChannelId);
                if (logChannel) {
                  await logChannel.send({ embeds: [logEmbed], ephemeral: false });
                } else {
                  console.error(`–ö–∞–Ω–∞–ª —Å ID ${logChannelId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
              }
            } else {
              await interaction.editReply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
            }
          }
        }

        // –ú–µ–Ω—è–µ—Ç —Å–ø–µ—Ü-–∏—é
        if (interaction.customId === 'RSQ_EditUserSpec') {
          const editSpec = interaction.fields.getTextInputValue('editSpec');
          const validFime = ['BT', 'ABT', 'RT', 'ART', 'BM', 'BMI', 'BMS', 'BSM'];
          const oldSpec = userName.info.spec;

          if (!validFime.includes(editSpec)) {
            const embedMessageError = new EmbedBuilder()
              .setColor('#FF0000')
              .setDescription('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è *(BT, ABT, RT, ART, BM, BMI, BMS, BSM)*');
  
            return interaction.editReply({ embeds: [embedMessageError], ephemeral: false });
          }

          const res = await sheets.spreadsheets.values.get({
            spreadsheetId,
            range: '7th Table | Users!C4:G'
          });
      
          const rows = res.data.values;
          const rowIndex = rows.findIndex(row => row[0] === nameClone);
      
          if (rowIndex !== -1) {
            const range = `7th Table | Users!G${rowIndex + 4}`;
      
            const valueInputOption = 'USER_ENTERED';
            const valueRangeBody = {
              values: [[editSpec]]
            };
      
            await sheets.spreadsheets.values.update({
              spreadsheetId,
              range,
              valueInputOption,
              resource: valueRangeBody
            });
      
            const user = await UserBattalion.findOneAndUpdate({ name: nameClone }, { 'info.spec': editSpec }, { new: true });

            if (user) {
              const successEmbed = new EmbedBuilder()
                .setColor('#910000')
                .setDescription('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
                .addFields({ name: '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: oldSpec, inline: true })
                .addFields({ name: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: editSpec, inline: true });

              await interaction.editReply({ embeds: [successEmbed] });
                
              const logEmbed = new EmbedBuilder()
                .setTitle('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü-–∏–∏')
                .setColor('#FFA500')
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <@${interaction.user.id}>\n–ü–æ–∑—ã–≤–Ω–æ–π: *${nameClone}*`)
                .addFields({ name: '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: oldSpec, inline: true })
                .addFields({ name: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: editSpec, inline: true })
                .setTimestamp();
                
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤
              if (settings && settings.channelID.reestrLog.updateDelo !== 'false') {
                const logChannelId = settings.channelID.reestrLog.updateDelo;
                const logChannel = interaction.guild.channels.cache.get(logChannelId);
                if (logChannel) {
                  await logChannel.send({ embeds: [logEmbed], ephemeral: false });
                } else {
                  console.error(`–ö–∞–Ω–∞–ª —Å ID ${logChannelId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
              }
            } else {
              await interaction.editReply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
            }
          }
        }

        // –ú–µ–Ω—è–µ—Ç –æ—Ç—Ä—è–¥
        if (interaction.customId === 'RSQ_EditUserSquad') {
          let editSquad = interaction.fields.getTextInputValue('editSquad');
          const validFime = settings.squadsBattalion.match(/\w+/g) || [];
          validFime.unshift('0');
          const oldSquad = userName.info.squad;

          if (!validFime.includes(editSquad)) {
            const embedMessageError = new EmbedBuilder()
              .setColor('#FF0000')
              .setDescription(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –≤–∞—à–µ–≥–æ –æ—Ç—Ä—è–¥–∞ *(–≤–≤–µ–¥–∏—Ç–µ 0 –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—Ç—Ä—è–¥–µ, –∏–ª–∏ –∂–µ ${settings.squadsBattalion} –µ—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –æ–¥–Ω–æ–º—É –∏–∑ —ç—Ç–∏—Ö –æ—Ç—Ä—è–¥–æ–≤)*`);
  
            return interaction.editReply({ embeds: [embedMessageError], ephemeral: false });
          }

          if (editSquad === '0') {
            editSquad = '‚ûñ';
          } else {
            editSquad = editSquad;
          }

          const res = await sheets.spreadsheets.values.get({
            spreadsheetId,
            range: '7th Table | Users!C4:J'
          });
      
          const rows = res.data.values;
          const rowIndex = rows.findIndex(row => row[0] === nameClone);
      
          if (rowIndex !== -1) {
            const range = `7th Table | Users!J${rowIndex + 4}`; // rowIndex + 4, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1, –∞ –º–∞—Å—Å–∏–≤ —Å 0
      
            const valueInputOption = 'USER_ENTERED';
            const valueRangeBody = {
              values: [[editSquad]]
            };
      
            await sheets.spreadsheets.values.update({
              spreadsheetId,
              range,
              valueInputOption,
              resource: valueRangeBody
            });
      
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const user = await UserBattalion.findOneAndUpdate({ name: nameClone }, { 'info.squad': editSquad }, { new: true });

            if (user) {
              const successEmbed = new EmbedBuilder()
                .setColor('#910000')
                .setDescription('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
                .addFields({ name: '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: oldSquad, inline: true})
                .addFields({ name: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: editSquad, inline: true});

              await interaction.editReply({ embeds: [successEmbed] });
                
              const logEmbed = new EmbedBuilder()
                .setTitle('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç—Ä—è–¥–∞')
                .setColor('#FFA500')
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <@${interaction.user.id}>\n–ü–æ–∑—ã–≤–Ω–æ–π: *${nameClone}*`)
                .addFields({ name: '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: oldSquad, inline: true})
                .addFields({ name: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: editSquad, inline: true})
                .setTimestamp();
                
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤
              if (settings && settings.channelID.reestrLog.updateDelo !== 'false') {
                const logChannelId = settings.channelID.reestrLog.updateDelo;
                const logChannel = interaction.guild.channels.cache.get(logChannelId);
                if (logChannel) {
                  await logChannel.send({ embeds: [logEmbed], ephemeral: false });
                } else {
                  console.error(`–ö–∞–Ω–∞–ª —Å ID ${logChannelId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
              }
            } else {
              await interaction.editReply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
            }
          }
        }

        // –ú–µ–Ω—è–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å
        if (interaction.customId === 'RSQ_EditUserBog') {

          const member = interaction.guild.members.cache.get(userName.userId);
          const roles = member.roles.cache;
          const oldBog = userName.info.job;
          
          const roleWordMap = {
            '863098749580738610': '–ö–æ–º–∞–Ω–¥–∏—Ä –∫–æ—Ä–ø—É—Å–∞',
            '863098617135890432': '–ó–∞–º. –ö–ú–î –∫–æ—Ä–ø—É—Å–∞',
            '974737363173527553': '–ì–ª. –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä',
            '1128620222274879498': '–°—Ç. –ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä',
            '945696911757820004': '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä',
            '939127649203273729': '–õ–∏–¥–µ—Ä ART',
            '861612462540980224': '–õ–∏–¥–µ—Ä RT',
            '1165595712784977970': '–ó–∞–º. –ª–∏–¥–µ—Ä–∞ RT',
            '927959817992159253': '–õ–∏–¥–µ—Ä ABT',
            '1165594972595159040': '–ó–∞–º. –ª–∏–¥–µ—Ä–∞ ABT',
            '865868296992849941': '–õ–∏–¥–µ—Ä MED',
            '1165595700168507462': '–ó–∞–º. –ª–∏–¥–µ—Ä–∞ MED'
          };

          let editBog = '';
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
          let hasRoles = false;
          roles.forEach(role => {
            if (roleWordMap[role.id]) {
              editBog += roleWordMap[role.id] + ', ';
              hasRoles = true;
            }
          });
          
          // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ä–æ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞, —Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ ‚ûñ
          if (!hasRoles) {
            editBog = '‚ûñ';
          } else {
            // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é –∑–∞–ø—è—Ç—É—é –∏ –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            editBog = editBog.trim().slice(0, -1);
          }

          const res = await sheets.spreadsheets.values.get({
            spreadsheetId,
            range: '7th Table | Users!C4:K'
          });
      
          const rows = res.data.values;
          const rowIndex = rows.findIndex(row => row[0] === nameClone);
      
          if (rowIndex !== -1) {
            const range = `7th Table | Users!K${rowIndex + 4}`; // rowIndex + 4, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1, –∞ –º–∞—Å—Å–∏–≤ —Å 0
      
            const valueInputOption = 'USER_ENTERED';
            const valueRangeBody = {
              values: [[editBog]]
            };
      
            await sheets.spreadsheets.values.update({
              spreadsheetId,
              range,
              valueInputOption,
              resource: valueRangeBody
            });
      
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const user = await UserBattalion.findOneAndUpdate({ name: nameClone }, { 'info.job': editBog }, { new: true });

            if (user) {
              const successEmbed = new EmbedBuilder()
                .setColor('#910000')
                .setDescription('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
                .addFields({ name: '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: oldBog, inline: true })
                .addFields({ name: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: editBog, inline: true });

              await interaction.editReply({ embeds: [successEmbed] });
                
              const logEmbed = new EmbedBuilder()
                .setTitle('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏')
                .setColor('#FFA500')
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <@${interaction.user.id}>\n–ü–æ–∑—ã–≤–Ω–æ–π: *${nameClone}*`)
                .addFields({ name: '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: oldBog, inline: true })
                .addFields({ name: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: editBog, inline: true })
                .setTimestamp();
                
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤
              if (settings && settings.channelID.reestrLog.updateDelo !== 'false') {
                const logChannelId = settings.channelID.reestrLog.updateDelo;
                const logChannel = interaction.guild.channels.cache.get(logChannelId);
                if (logChannel) {
                  await logChannel.send({ embeds: [logEmbed], ephemeral: false });
                } else {
                  console.error(`–ö–∞–Ω–∞–ª —Å ID ${logChannelId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
              }
            } else {
              await interaction.editReply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
            }
          }
        }

        // –ú–µ–Ω—è–µ—Ç —á–ª–µ–Ω—Å—Ç–≤–æ –ë–°–û
        if (interaction.customId === 'RSQ_EditUserBso') {
          let editBso = interaction.fields.getTextInputValue('editBso');
          const validFime = ['0', 'ARC', 'ARF'];
          const oldBSO = userName.info.bso;

          if (!validFime.includes(editBso)) {
            const embedMessageError = new EmbedBuilder()
              .setColor('#FF0000')
              .setDescription('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –ë–°–û *(–≤–≤–µ–¥–∏—Ç–µ 0 –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ë–°–û, –∏–ª–∏ –∂–µ ARC; ARF –µ—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä)*');
  
            return interaction.editReply({ embeds: [embedMessageError], ephemeral: false });
          }

          if (editBso === '0') {
            editBso = '‚ûñ';
          } else {
            editBso = editBso;
          }

          const res = await sheets.spreadsheets.values.get({
            spreadsheetId,
            range: '7th Table | Users!C4:H'
          });
      
          const rows = res.data.values;
          const rowIndex = rows.findIndex(row => row[0] === nameClone);
      
          if (rowIndex !== -1) {
            const range = `7th Table | Users!H${rowIndex + 4}`; // rowIndex + 4, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1, –∞ –º–∞—Å—Å–∏–≤ —Å 0
      
            const valueInputOption = 'USER_ENTERED';
            const valueRangeBody = {
              values: [[editBso]]
            };
      
            await sheets.spreadsheets.values.update({
              spreadsheetId,
              range,
              valueInputOption,
              resource: valueRangeBody
            });
      
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const user = await UserBattalion.findOneAndUpdate({ name: nameClone }, { 'info.bso': editBso }, { new: true });

            if (user) {
              const successEmbed = new EmbedBuilder()
                .setColor('#910000')
                .setDescription('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
                .addFields({ name: '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: oldBSO, inline: true })
                .addFields({ name: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: editBso, inline: true });

              await interaction.editReply({ embeds: [successEmbed] });
                
              const logEmbed = new EmbedBuilder()
                .setTitle('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ë–°–û')
                .setColor('#FFA500')
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <@${interaction.user.id}>\n–ü–æ–∑—ã–≤–Ω–æ–π: *${nameClone}*`)
                .addFields({ name: '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: oldBSO, inline: true })
                .addFields({ name: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: editBso, inline: true })
                .setTimestamp();
                
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤
              if (settings && settings.channelID.reestrLog.updateDelo !== 'false') {
                const logChannelId = settings.channelID.reestrLog.updateDelo;
                const logChannel = interaction.guild.channels.cache.get(logChannelId);
                if (logChannel) {
                  await logChannel.send({ embeds: [logEmbed], ephemeral: false });
                } else {
                  console.error(`–ö–∞–Ω–∞–ª —Å ID ${logChannelId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
              }
            } else {
              await interaction.editReply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
            }
          }
        }

        // –ú–µ–Ω—è–µ—Ç –¥–∞—Ç—É –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
        if (interaction.customId === 'RSQ_EditUserDateV') {
          const editData = interaction.fields.getTextInputValue('editData');
          const dateRegex = /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.\d{4}$/;
          const oldDateV = userName.info.dateV;

          if (!dateRegex.test(editData)) {
            const errorEmbed = new EmbedBuilder()
              .setColor('#FF0000')
              .setDescription('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì *(–ø—Ä–∏–º–µ—Ä 09.09.2023)*');
  
            return interaction.editReply({ embeds: [errorEmbed], ephemeral: false });
          }

          const res = await sheets.spreadsheets.values.get({
            spreadsheetId,
            range: '7th Table | Users!C4:L'
          });
      
          const rows = res.data.values;
          const rowIndex = rows.findIndex(row => row[0] === nameClone);
      
          if (rowIndex !== -1) {
            const range2 = `7th Table | Users!L${rowIndex + 4}`;

            const valueInputOption = 'USER_ENTERED';
            const valueRangeBody2 = {
              values: [[editData]]
            };

            await sheets.spreadsheets.values.update({
              spreadsheetId,
              range: range2,
              valueInputOption,
              resource: valueRangeBody2
            });
      
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const user = await UserBattalion.findOneAndUpdate({ name: nameClone }, { 'info.dateV': editData }, { new: true });

            if (user) {
              const successEmbed = new EmbedBuilder()
                .setColor('#910000')
                .setDescription('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
                .addFields({ name: '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: oldDateV, inline: true })
                .addFields({ name: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: editData, inline: true });

              await interaction.editReply({ embeds: [successEmbed] });
                
              const logEmbed = new EmbedBuilder()
                .setTitle('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è')
                .setColor('#FFA500')
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <@${interaction.user.id}>\n–ü–æ–∑—ã–≤–Ω–æ–π: *${nameClone}*`)
                .addFields({ name: '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: oldDateV, inline: true })
                .addFields({ name: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', value: editData, inline: true })
                .setTimestamp();
                
              if (settings && settings.channelID.reestrLog.updateDelo !== 'false') {
                const logChannelId = settings.channelID.reestrLog.updateDelo;
                const logChannel = interaction.guild.channels.cache.get(logChannelId);
                if (logChannel) {
                  await logChannel.send({ embeds: [logEmbed], ephemeral: false });
                } else {
                  console.error(`–ö–∞–Ω–∞–ª —Å ID ${logChannelId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
              }
            } else {
              await interaction.editReply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
            }
          }
        }
      } else {
        await interaction.editReply('–í–∞—à–µ –¥–µ–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ');
      }
    } catch (error) {
      console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ #1074:', error);
      await interaction.editReply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ #1074');
    }
  }
  
  if (interaction.isModalSubmit() && interaction.customId === 'raportB') {

    try{
        const nameClone = interaction.fields.getTextInputValue('nameClone');
        const nameCMDClone = interaction.fields.getTextInputValue('nameCMDClone');
        const namesGroup = interaction.fields.getTextInputValue('namesGroup');
        const date = interaction.fields.getTextInputValue('date');
        const description = interaction.fields.getTextInputValue('description');

        
          
        const existingData = await SettingBattalion.findOne({ guildID: interaction.guildId });

        let reportNumber = 1; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–∞–ø–æ—Ä—Ç–∞

        if (existingData) {
          // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∞–π–¥–µ–Ω, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ nFight –Ω–∞ 1
          existingData.raports.nFight = (parseInt(existingData.raports.nFight) + 1).toString();
          await existingData.save();
          reportNumber = parseInt(existingData.raports.nFight);
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ SettingBattalion, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
          const addTodb = new SettingBattalion({
            guildID: interaction.guildId,
            guildName: interaction.guild.name
          });
          await addTodb.save();
        }

        const userCMD = await UserBattalion.findOne({ name: nameCMDClone });
        const userClone = await UserBattalion.findOne({ name: nameClone });

        if (userCMD) {
          if (userClone) {

            if (!userClone || userClone.userId !== interaction.member.id) {
              await interaction.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞–ø–æ—Ä—Ç–∞ –æ—Ç –∏–º–µ–Ω–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
              return;
            }
            const numberCMD = /^\d{4}$/.test(userCMD.info.number) ? userCMD.info.number : '';
            const numberClone = /^\d{4}$/.test(userClone.info.number) ? userClone.info.number : '';

            const commander = {
              id: userCMD.userId,
              rank: `${userCMD.info.rank}`,
              number: `${numberCMD}`,
              name: `${nameCMDClone}`
            };

            const clone = {
              id: userClone.userId,
              rank: `${userClone.info.rank}`,
              number: `${numberClone}`,
              name: `${nameClone}`
            };

            // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–º–µ–Ω –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
            const group = [];
            const namesArray = namesGroup.split(',').map(name => name.trim());
            for (const name of namesArray) {
              const user = await UserBattalion.findOne({ name });
              if (user) {
                const number = /^\d{4}$/.test(user.info.number) ? user.info.number : '';
                group.push({
                  id: user.userId,
                  rank: `${user.info.rank}`,
                  number: `${number}`,
                  name: `${name}`
                });
              }
            }

            const row = new ActionRowBuilder().addComponents(
              new ButtonBuilder()
                .setCustomId('RSQ_approveRaportFight')
                .setLabel('–û–¥–æ–±—Ä–∏—Ç—å')
                .setStyle(ButtonStyle.Success),
              new ButtonBuilder()
                .setCustomId('RSQ_rejectRaportFight')
                .setLabel('–û—Ç–∫–ª–æ–Ω–∏—Ç—å')
                .setStyle(ButtonStyle.Danger),
            );
              
            const channelRaportModer = client.channels.cache.get(existingData.channelID.raportsLog.fightModer);
            const channelRaportUser = client.channels.cache.get(existingData.channelID.raportsLog.fightUser);
            
            const embedToChannel = new EmbedBuilder()
              .setAuthor({ name: '–°—Ç–∞—Ç—É—Å: üëÄ', iconURL: 'https://cdn.discordapp.com/icons/981509661926785064/a_59b054b674dcdc19922b7574bc16b284.webp?size=96' })
              .setTitle(`–†–∞–ø–æ—Ä—Ç –æ –±–æ–µ–≤–æ–º –≤—ã–ª–µ—Ç–µ ‚Ññ${reportNumber}`)
              .setColor('#3498db')
              .setDescription(`–î–æ–∫–ª–∞–¥—ã–≤–∞–µ—Ç *${clone.rank} ${clone.number} ${clone.name}* ||<@${clone.id}>|| –æ –±–æ–µ–≤–æ–º –≤—ã–ª–µ—Ç–µ ‚Ññ${reportNumber}\n\n**–ö–æ–º–∞–Ω–¥–∏—Ä:** *${commander.rank} ${commander.number} ${commander.name} ||<@${commander.id}>||*\n**–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏:** ${date}\n\n**–°–æ—Å—Ç–∞–≤:** ${group.map(member => `\n*${member.rank} ${member.number} ${member.name}* ||<@${member.id}>||`)}\n\n**–•–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏**\n ${description}`)
              .setTimestamp();

            const sentMessage = await channelRaportModer.send({ content: `<@&807365822154014771>`, embeds: [embedToChannel], components: [row] });
            const sentMessageUser = await channelRaportUser.send({ embeds: [embedToChannel] });
            await interaction.reply({ content: `–†–∞–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í–∞—à–µ–º—É —Ä–∞–ø–æ—Ä—Ç—É –ø—Ä–∏—Å–≤–æ–µ–Ω **${reportNumber}** –Ω–æ–º–µ—Ä, –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è —Ä–∞–ø–æ—Ä—Ç–∞ –≤–∞—à–∏–º –∫–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µ–º, –≤—ã —É–∑–Ω–∞–µ—Ç–µ –µ–≥–æ —Å—Ç–∞—Ç—É—Å –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ --> ${sentMessageUser.url}`, ephemeral: false });

            for (const member of group) {
              if (member.number === '') {
                member.number = '‚ûñ';
              }
            }
            
            const commanderNumber = commander.number !== '' ? commander.number : '‚ûñ';
            const cloneNumber = clone.number !== '' ? clone.number : '‚ûñ';

            const newReport = new RaportFight({
              reportNumber,
              moderatorMessageId: sentMessage.id,
              moderatorChannelId: existingData.channelID.raportsLog.fightModer,
              userMessageId: sentMessageUser.id,
              userChannelId: existingData.channelID.raportsLog.fightUser,
              reporter: {
                id: clone.id,
                rank: clone.rank,
                number: cloneNumber,
                name: clone.name
              },
              commander: {
                id: commander.id,
                rank: commander.rank,
                number: commanderNumber,
                name: commander.name
              },
              group,
              operationDescription: description,
              date
            });

            await newReport.save();

          } else {
            await interaction.reply('–¢–æ—Ç –∫—Ç–æ –¥–æ–∫–ª–∞–¥—ã–≤–∞–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
          }
        } else {
          await interaction.reply('–ö–æ–º–∞–Ω–¥–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }
    } catch (error) {
      console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (#4544): ${error}`);   
    }
  }

  if (interaction.isModalSubmit() && interaction.customId === 'newnamereestr') {

    try {
      await interaction.deferReply();

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å
      queue.push(interaction);

      // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏
      const position = queue.length;
      
      //console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.username} –∑–∞–Ω—è–ª –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏: ${position}`);

      if (position === 1) {
        const firstInQueueMessage = new EmbedBuilder()
          .setTitle('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞')
          .setColor('#00FF00')
          .setDescription('–í—ã –ø–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å...');

        await interaction.followUp({ embeds: [firstInQueueMessage] });
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –µ–≥–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
        const queueMessage = new EmbedBuilder()
          .setTitle('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞')
          .setColor('#FFFF00')
          .setDescription(`–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${position}`);
        
        await interaction.editReply({ embeds: [queueMessage], ephemeral: true });
      }
        
      // –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
      if (!isProcessingQueue) {
        await processQueue();
      }
    } catch (error) {
      console.error(error);
  
      const embedErrorMessage = new EmbedBuilder()
        .setTitle('–û—à–∏–±–∫–∞')
        .setColor('#FF0000')
        .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
  
      interaction.editReply({ embeds: [embedErrorMessage], ephemeral: false });
    }
  }
};

async function createEmbedMessage(selectedValue, settings) {
  let actualRadio;
  const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  if (selectedValue in settings.radioConnection.numberRadio) {
    actualRadio = settings.radioConnection.numberRadio[selectedValue];
  } else {
    actualRadio = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
  }
  
  return new EmbedBuilder()
    .setTitle('–®—Ç–∞–± –∫–æ—Ä–ø—É—Å–∞')
    .setColor('#910000')
    .addFields({ name: `‚Å£‚ÄÇ`, value: `üì° **–ß–∞—Å—Ç–æ—Ç—ã –∫–æ—Ä–ø—É—Å–∞**\n‚ïé‚Å£‚ÄÇ\n‚ïé‚Å£‚ÄÇ*${actualRadio}* | **–û—Å–Ω–æ–≤–Ω–∞—è**\n‚ïé‚Å£‚ÄÇ*ZULU - 91.1* | **–°–º–µ–∂–Ω–∞—è**\n‚ï∞` })
    .setFooter({ text: `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${timestamp}` });
}
